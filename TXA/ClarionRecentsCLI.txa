[APPLICATION]
VERSION 34
TODO ABC ToDo
PROCEDURE Main
[COMMON]
FROM ABC
MODIFIED '2024/05/22' ' 7:53:30'
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('ErrorManager', 'ErrorStatusManager', 'FileManager:', |
  'FuzzyMatcher', 'INIManager', 'RelationManager:', 'Translator')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('ErrorClass')
WHEN  ('ErrorStatusManager') ('ErrorStatusClass')
WHEN  ('FuzzyMatcher') ('FuzzyClass')
WHEN  ('INIManager') ('INIClass')
WHEN  ('Translator') ('TranslatorClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%ProgramAuthor DEFAULT  ('Donald Ridley')
%ProgramIcon DEFAULT  ('')
%MessageDescription LONG  (1)
%GlobalExternal LONG  (0)
%ExternalSource DEFAULT  ('Dynamic Link Library (DLL)')
%GenerateEmbedComments LONG  (0)
%INIType DEFAULT  ('NVD_INI')
%INIFile DEFAULT  ('Program Name.INI')
%ININame DEFAULT  ('')
%INIProgramIniLocation DEFAULT  ('APPDIR')
%INICSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%CSIDLCompanyDir DEFAULT  ('')
%CSIDLProductDir DEFAULT  ('')
%CSIDLCreate LONG  (0)
%INIInAppDirectory LONG  (1)
%REGRoot DEFAULT  ('REG_CLASSES_ROOT')
%DisableINISaveWindow LONG  (0)
%PreserveVars MULTI LONG  ()
%PreserveVar DEPEND %PreserveVars DEFAULT TIMES 0

%EnableRunTimeTranslator LONG  (0)
%FuzzyMatchingEnabled LONG  (1)
%IgnoreCase LONG  (1)
%WordOnly LONG  (0)
%ButtonMarginsCompatibility LONG  (0)
%UseDefaultXPManifest LONG  (0)
%GenerateXPManifest LONG  (1)
%LinkGenerateXPManifest LONG  (1)
%AddVistaXPManifest LONG  (1)
%VistaManifestExecutionLevel DEFAULT  ('asInvoker')
%VistaManifestUIAccess LONG  (0)
%NoThemedControlsDependency LONG  (0)
%VistaManifestdpiAware LONG  (1)
%VistaManifestDependentAssembly MULTI LONG  ()
%VistaManifestDependentAssemblyName DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyVersion DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyType DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyPublicKeyToken DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyLanguage DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyProcessorArchitecture DEPEND %VistaManifestDependentAssembly LONG TIMES 0

%W7ManifestVista LONG  (1)
%W7ManifestW7 LONG  (1)
%W7ManifestW8 LONG  (1)
%W7ManifestW81 LONG  (1)
%W7ManifestW10 LONG  (1)
%ForceMakeTransparentXPManifest LONG  (0)
%ForceMakeColorXPManifest LONG  (0)
%ForceSHEETNoTheme LONG  (0)
%ExtUIXPMenuEnableGlobal LONG  (0)
%ExtUIXPMenuColorTypeGlobal DEFAULT  ('OFF')
%ExtUIXPMenuDisableImageBar LONG  (1)
%ExtUIXPMenuEnableRuntime LONG  (0)
%ExtUIXPMenuRuntimeVar DEFAULT  ('')
%ExtUIXPMenuColorLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorRightGlobal LONG  (12560039)
%ExtUIXPMenuColorSelectionBarLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectionBarRightGlobal LONG  (15920364)
%ExtUIXPMenuSelVertical LONG  (1)
%ExtUIXPMenuColorSelectionBorderGlobal LONG  (15920364)
%ExtUIXPMenuColorHotLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorHotRightGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectedLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectedRightGlobal LONG  (15920364)
%ExtUIXPMenuColorNormalBarLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorNormalBarRightGlobal LONG  (15920364)
%ExtUIXPMenuColorItemBackgroundGlobal LONG  (-2147483644)
%ExtUIXPMenuColorNormalText LONG  (0)
%ExtUIXPMenuColorSelectedText LONG  (0)
%ExtUIXPMenuColorHotText LONG  (0)
%ExtUIXPMenuFlat LONG  (1)
%ExtUIXPMenuShowImageBar LONG  (0)
%ExtUIXPMenuSeparator3D LONG  (1)
%ExtUIXPMenuSeparatorFull LONG  (0)
%ExtUIXPMenuVerticalLine LONG  (1)
%ExtUIMDITabGlobal DEFAULT  ('DISABLE')
%ExtUIMDITabStyleGlobal DEFAULT  ('Default')
%ExtUITabStyleGlobal DEFAULT  ('Default')
%WindowEnableEnhanceFocus LONG  (0)
%SelectedText LONG  (1)
%SelectedRadio LONG  (1)
%SelectedSpin LONG  (1)
%SelectedCheck LONG  (1)
%SelectedDropList LONG  (1)
%SelectedList LONG  (1)
%SelectedDisplayChangeColor LONG  (1)
%SelectedColor LONG  (65535)
%SelectedStyle LONG  (1)
%SelectedRequired LONG  (0)
%SelectedRequiredColor LONG  (65535)
%SelectedDisplayBox LONG  (1)
%SelectedDisplayBoxFillColor LONG  (65535)
%SelectedDisplayBoxBorderColor LONG  (0)
%SelectedDisplayBoxBorderSize DEFAULT  ('2')
%SelectedRequiredBox LONG  (0)
%SelectedRequiredDisplayBoxFillColor LONG  (255)
%SelectedRequiredDisplayBoxBorderColor LONG  (0)
%SelectedCaret LONG  (1)
%SelectedCaretColor LONG  (8421504)
%SelectedCaretCharacter DEFAULT  ('»')
%SelectedCaretCharacterSeparation DEFAULT  ('8')
%ExcludeSelectedDropList LONG  (0)
%EnableOSK DEFAULT  ('OFF')
%GlobalUseEnterInsteadTab LONG  (0)
%GlobalUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalUseEnterInsteadTabEnable DEFAULT  ('Enable')
%GlobalUseEnterInsteadTabEnableValue DEFAULT  ('True')
%GlobalInterLine DEFAULT  ('0')
%GlobalEnableAutoSizeColumn LONG  (0)
%GlobalEnableListFormatManager LONG  (0)
%GlobalUserFieldListFormatManager DEFAULT  ('1')
%TableOrigin DEFAULT  ('Application')
%FileEquate DEFAULT  ('LFM_CFile')
%ConfigFilePRE DEFAULT  ('CFG')
%ConfigFileOEM LONG  (0)
%ConfigFileTHREAD LONG  (1)
%ConfigFileENCRYPT LONG  (0)
%ConfigFilePASSWORD DEFAULT  ('')
%FormatNameSize DEFAULT  ('30')
%FormatBufferSize DEFAULT  ('5120')
%VariableBufferSize DEFAULT  ('2048')
%ConfigFilePath DEFAULT  ('')
%UseConfigFileName DEFAULT  ('Default')
%ConfigFileNAME DEFAULT  ('Formats.FDB')
%ColonCounter DEFAULT  ('')
%WrongSymbol DEFAULT  ('')
%DictionaryTableOrigin FILE  ()
%GlobalLFMSortOrderMenuText DEFAULT  ('SortOrder')
%GlobalEnableRebase LONG  (0)
%RBDMethod DEFAULT  ('Specify manually')
%RBDImageBase DEFAULT  ('10000000')
%DefaultGenerate LONG  (0)
%DefaultRILogout LONG  (1)
%LockRecoverTime DEFAULT  ('10')
%DefaultThreaded DEFAULT  ('Use File Setting')
%DefaultCreate DEFAULT  ('Use File Setting')
%DefaultExternal DEFAULT  ('None External')
%DefaultLocalExternal LONG  (0)
%DefaultExternalSource DEFAULT  ('')
%DefaultExternalAPP LONG  (0)
%DefaultExport LONG  (0)
%DefaultOpenMode DEFAULT  ('Share')
%DefaultUserAccess DEFAULT  ('Read/Write')
%DefaultOtherAccess DEFAULT  ('Deny None')
%DefaultLazyOpen LONG  (1)
%GeneratePropDataPath LONG  (0)
%PropDataPathLocation DEFAULT  ('CSIDLLIKEINI')
%DataPathCSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%DataPathCSIDLCompanyDir DEFAULT  ('')
%DataPathCSIDLProductDir DEFAULT  ('')
%DataPathCSIDLCreate LONG  (0)
%DataPathOtherDirectory DEFAULT  ('')
%DataPathOtherDirectoryCreate LONG  (0)
%OverrideGenerate DEPEND %File LONG TIMES 0

%OverrideRILogout DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('YES')
WHEN  ('ErrorStatusManager') ('YES')
WHEN  ('FuzzyMatcher') ('YES')
WHEN  ('INIManager') ('YES')
WHEN  ('Translator') ('YES')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('GlobalErrors')
WHEN  ('ErrorStatusManager') ('GlobalErrorsStatus')
WHEN  ('FuzzyMatcher') ('FuzzyMatcher')
WHEN  ('INIManager') ('INIMgr')
WHEN  ('Translator') ('Translator')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (0)
WHEN  ('ErrorStatusManager') (0)
WHEN  ('FuzzyMatcher') (0)
WHEN  ('INIManager') (0)
WHEN  ('Translator') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('FuzzyMatcher')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('FuzzyMatcher')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%OverrideThreaded DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideCreate DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideExternal DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLocalExternal DEPEND %File LONG TIMES 0

%OverrideExternalSource DEPEND %File DEFAULT TIMES 0

%OverrideExternalAPP DEPEND %File LONG TIMES 0

%OverrideExport DEPEND %File LONG TIMES 0

%FileDeclarationMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use User Options')

%FileDeclarationType DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationThread DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationBindable DEPEND %File LONG TIMES 1
WHEN  ('') (1)

%FileDeclarationName DEPEND %File DEFAULT TIMES 0

%FileDeclarationOver DEPEND %File DEFAULT TIMES 0

%OverrideOpenMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideUserAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideOtherAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLazyOpen DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideDoNotAssertOnCloseMisuse DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%StandardExternalModule DEPEND %Module LONG TIMES 2
WHEN  ('ClarionRecentsCLI.clw') (1)
WHEN  ('ClarionRecentsCLI001.clw') (1)

%NoGenerateGlobals LONG  (0)
%WindowManagerType DEFAULT  ('WindowManager')
%ResetOnGainFocus LONG  (0)
%AutoToolbar LONG  (1)
%AutoRefresh LONG  (1)
%ImageClass DEFAULT  ('ImageManager')
%ErrorStatusManagerType DEFAULT  ('ErrorStatusClass')
%ErrorManagerType DEFAULT  ('ErrorClass')
%DefaultErrorCategory DEFAULT  ('ABC')
%AllowSelectCopy LONG  (0)
%StoreErrorHistory LONG  (0)
%LimitStoredHistory LONG  (0)
%ErrorHistoryThreshold DEFAULT  ('300')
%HistoryViewTrigger DEFAULT  ('Level:Fatal')
%PopupClass DEFAULT  ('PopupClass')
%SelectFileClass DEFAULT  ('SelectFileClass')
%ResizerType DEFAULT  ('WindowResizeClass')
%ResizerDeFaultFindParents LONG  (1)
%ResizerDefaultOptimizeMoves LONG  (1)
%ResizerDefaultOptimizeRedraws LONG  (1)
%INIClass DEFAULT  ('INIClass')
%RunTimeTranslatorType DEFAULT  ('TranslatorClass')
%ExtractionFilename DEFAULT  ('')
%TranslationGroups MULTI LONG  ()
%TranslationFile DEPEND %TranslationGroups DEFAULT TIMES 0

%TranslationGroup DEPEND %TranslationGroups DEFAULT TIMES 0

%CalendarManagerType DEFAULT  ('CalendarClass')
%GlobalChangeColor LONG  (0)
%GlobalColorSunday LONG  (255)
%GlobalColorSaturday LONG  (255)
%GlobalColorHoliday LONG  (32768)
%GlobalColorOther LONG  (0)
%GlobalSelectOnClose DEFAULT  ('Select')
%GlobalUseABCClasess LONG  (1)
%FileManagerType DEFAULT  ('FileManager')
%ViewManagerType DEFAULT  ('ViewManager')
%RelationManagerType DEFAULT  ('RelationManager')
%BrowserType DEFAULT  ('BrowseClass')
%ActiveInvisible LONG  (0)
%AllowUnfilled LONG  (0)
%RetainRow LONG  (1)
%FileDropManagerType DEFAULT  ('FileDropClass')
%FileDropComboManagerType DEFAULT  ('FileDropComboClass')
%FormVCRManagerType DEFAULT  ('FormVCRClass')
%BrowseEIPManagerType DEFAULT  ('BrowseEIPManager')
%EditInPlaceInterface DEFAULT  ('Detailed')
%EditInPlaceType DEFAULT  ('EditEntryClass')
%EditInPlaceEntryType DEFAULT  ('EditEntryClass')
%EditInPlaceTextType DEFAULT  ('EditTextClass')
%EditInPlaceCheckType DEFAULT  ('EditCheckClass')
%EditInPlaceSpinType DEFAULT  ('EditSpinClass')
%EditInPlaceDropListType DEFAULT  ('EditDropListClass')
%EditInPlaceDropComboType DEFAULT  ('EditDropComboClass')
%EditInPlaceColorType DEFAULT  ('EditColorClass')
%EditInPlaceFileType DEFAULT  ('EditFileClass')
%EditInPlaceFontType DEFAULT  ('EditFontClass')
%EditInPlaceMultiSelectType DEFAULT  ('EditMultiSelectClass')
%EditInPlaceCalendarType DEFAULT  ('EditCalendarClass')
%EditInPlaceLookupType DEFAULT  ('EditLookupClass')
%EditInPlaceOtherType DEFAULT  ('EditEntryClass')
%QBEFormType DEFAULT  ('QueryFormClass')
%QBEFormVisualType DEFAULT  ('QueryFormVisual')
%QBEListType DEFAULT  ('QueryListClass')
%QBEListVisualType DEFAULT  ('QueryListVisual')
%StepManagerType DEFAULT  ('StepClass')
%StepManagerLongType DEFAULT  ('StepLongClass')
%StepManagerRealType DEFAULT  ('StepRealClass')
%StepManagerStringType DEFAULT  ('StepStringClass')
%StepManagerCustomType DEFAULT  ('StepCustomClass')
%StepLocatorType DEFAULT  ('StepLocatorClass')
%EntryLocatorType DEFAULT  ('EntryLocatorClass')
%IncrementalLocatorType DEFAULT  ('IncrementalLocatorClass')
%FilteredLocatorType DEFAULT  ('FilterLocatorClass')
%FuzzyMatcherClass DEFAULT  ('FuzzyClass')
%GridClass DEFAULT  ('GridClass')
%SidebarClass DEFAULT  ('SidebarClass')
%ProcessType DEFAULT  ('ProcessClass')
%PrintPreviewType DEFAULT  ('PrintPreviewClass')
%ReportManagerType DEFAULT  ('ReportManager')
%ReportTargetSelectorManagerType DEFAULT  ('ReportTargetSelectorClass')
%BreakManagerType DEFAULT  ('BreakManagerClass')
%AsciiViewerClass DEFAULT  ('AsciiViewerClass')
%AsciiSearchClass DEFAULT  ('AsciiSearchClass')
%AsciiPrintClass DEFAULT  ('AsciiPrintClass')
%AsciiFileManagerType DEFAULT  ('AsciiFileClass')
%ToolbarClass DEFAULT  ('ToolbarClass')
%ToolbarListBoxType DEFAULT  ('ToolbarListboxClass')
%ToolbarRelTreeType DEFAULT  ('ToolbarReltreeClass')
%ToolbarUpdateClassType DEFAULT  ('ToolbarUpdateClass')
%ToolbarFormVCRType DEFAULT  ('ToolbarFormVCRClass')
%OverrideAbcSettings LONG  (0)
%AbcSourceLocation DEFAULT  ('LINK')
%AbcLibraryName DEFAULT  ('')
%AppTemplateFamily DEFAULT  ('ABC')
%CWTemplateVersion DEFAULT  ('v11.1')
%ABCVersion DEFAULT  ('11100')
[ADDITION]
NAME StringTheory Activate_StringTheory
[INSTANCE]
INSTANCE 1
[PROMPTS]
%NoGloStringTheory LONG  (0)
%md5 LONG  (0)
%MultiDLL LONG  (0)
%RootDLL LONG  (0)
%dClasses8Bx MULTI LONG  (1, 2, 3, 4, 5)
%dClasses8B DEPEND %dClasses8Bx DEFAULT TIMES 5
WHEN  (1) ('STRINGTHEORY')
WHEN  (2) ('STRINGPICTURE')
WHEN  (3) ('UNIXDATE')
WHEN  (4) ('STRINGFORMAT')
WHEN  (5) ('STRINGDEFORMAT')

%dBaseClass DEPEND %dClasses8Bx DEFAULT TIMES 5
WHEN  (1) ('')
WHEN  (2) ('')
WHEN  (3) ('')
WHEN  (4) ('UnixDate')
WHEN  (5) ('UnixDate')

%dClassINCFile DEPEND %dClasses8Bx DEFAULT TIMES 5
WHEN  (1) ('STRINGTHEORY.INC')
WHEN  (2) ('STRINGTHEORY.INC')
WHEN  (3) ('STRINGTHEORY.INC')
WHEN  (4) ('STRINGTHEORY.INC')
WHEN  (5) ('STRINGTHEORY.INC')

%dMethods8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 5
WHEN  (1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, |
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, |
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, |
  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, |
  149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, |
  165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, |
  181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, |
  197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, |
  213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, |
  229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, |
  245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, |
  261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, |
  277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, |
  293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, |
  309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, |
  325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, |
  341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, |
  357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, |
  373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, |
  389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, |
  405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, |
  421)
WHEN  (2) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38)
WHEN  (3) (1, 2, 3, 4, 5, 6)
WHEN  (4) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
WHEN  (5) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)

%dMethods8C DEPEND %dMethods8Cx DEFAULT TIMES 5
WHEN  (1)TIMES 421
WHEN  (1) ('Construct {13}Procedure ()')
WHEN  (2) ('Destruct {14}Procedure (),Virtual')
WHEN  (3) ('Start {17}Procedure (long pForce=true),Virtual')
WHEN  (4) ('Stream {16}Procedure (string pFilename, long pSize=10, bool pAppendFlag=false),long, proc, virtual')
WHEN  (5) ('NoStream {14}Procedure (),virtual')
WHEN  (6) ('FlushAndKeep {10}Procedure (),long, proc, virtual')
WHEN  (7) ('Flush {17}Procedure (),long, proc, virtual')
WHEN  (8) ('Flush {17}Procedure (string pStr),long, proc, virtual')
WHEN  (9) ('Flush {17}Procedure (*string pStr),long, proc, virtual')
WHEN  (10) ('Flush {17}Procedure (StringTheory pStr),long, proc, virtual')
WHEN  (11) ('AppendA {15}Procedure (string newValue, long pClip=st:NoClip, <<string pSep>), virtual   ')
WHEN  (12) ('AppendBinary {10}Procedure (long pValue,Long pLength=4),Virtual')
WHEN  (13) ('Append {16}Procedure (string newValue), virtual')
WHEN  (14) ('Append {16}Procedure (*string newValue), virtual')
WHEN  (15) ('Append {16}Procedure (string newValue, long pOptions), virtual ')
WHEN  (16) ('Append {16}Procedure (*string newValue, long pOptions), virtual  ')
WHEN  (17) ('Append {16}Procedure (string newValue, long pOptions = st:NoClip, string pSep), virtual ')
WHEN  (18) ('Append {16}Procedure (*string newValue, long pOptions = st:NoClip, string pSep), virtual ')
WHEN  (19) ('Append {16}Procedure (StringTheory pStr, long pOptions = st:NoClip, string pSep), virtual')
WHEN  (20) ('Append {16}Procedure (StringTheory pStr, string pSep), virtual')
WHEN  (21) ('Append {16}Procedure (StringTheory pStr), virtual')
WHEN  (22) ('Cat {19}Procedure (stringTheory pStr),virtual')
WHEN  (23) ('Cat {19}Procedure (stringTheory pStr, long pLen ),virtual')
WHEN  (24) ('Cat {19}Procedure (string newValue),virtual')
WHEN  (25) ('Cat {19}Procedure (string newValue, long pLen ),virtual')
WHEN  (26) ('Cat {19}Procedure (*string newValue),virtual')
WHEN  (27) ('Cat {19}Procedure (*string newValue, long pLen),virtual')
WHEN  (28) ('Cat {19}Procedure (*byte newValue),virtual')
WHEN  (29) ('CatAddr {15}Procedure (long pAddr, long pLen),virtual')
WHEN  (30) ('SetValue {14}Procedure (StringTheory newValue), virtual')
WHEN  (31) ('SetValue {14}Procedure (StringTheory newValue,long pOptions), virtual')
WHEN  (32) ('SetValue {14}Procedure (string newValue,long pClip=st:NoClip), virtual')
WHEN  (33) ('SetValue {14}Procedure (*string newValue,long pClip=st:NoClip), virtual')
WHEN  (34) ('SetValueByAddress     Procedure (long newValueAddress,long pLength), virtual')
WHEN  (35) ('SetValueByCstringAddress Procedure(long pAddress,Long pEncoding=-1), virtual')
WHEN  (36) ('_EqualsUnicode        Procedure (*String otherValue, Long pOptions = st:UnicodeCompare),long, virtual')
WHEN  (37) ('_EqualsUnicode        Procedure (StringTheory otherValue, Long pOptions = st:UnicodeCompare),long, virtual')
WHEN  (38) ('Equals {16}Procedure (StringTheory otherValue, Long pOptions = ST:SimpleCompare),long, virtual')
WHEN  (39) ('Equals {16}Procedure (String otherValue, Long pOptions = ST:SimpleCompare + ST:Clip),long, virtual')
WHEN  (40) ('_GetNextBufferSize    Procedure (Long pLen),Long,Virtual')
WHEN  (41) ('_SetValuePointer      Procedure (Long pPtr,Long pSize, Long pEnd, Long pDispose=1),Virtual')
WHEN  (42) ('_StealValue {11}Procedure (stringTheory otherValue), virtual')
WHEN  (43) ('_StealValue {11}Procedure (*string pOtherValue), virtual')
WHEN  (44) ('Swap {18}Procedure (stringTheory pOther), virtual')
WHEN  (45) ('Assign {16}Procedure (*string newValue), virtual')
WHEN  (46) ('Assign {16}Procedure (string newValue), virtual')
WHEN  (47) ('Abbreviate {12}Procedure (Long pPos,Long pRangeLeft = 15,Long pRangeRight = 15),Long,Proc,Virtual')
WHEN  (48) ('GetValuePtr {11}Procedure (),*String,virtual')
WHEN  (49) ('GetValuePtr {11}Procedure (Long pStart),*String,virtual')
WHEN  (50) ('GetValuePtr {11}Procedure (Long pStart,Long pEnd),*String,virtual')
WHEN  (51) ('GetAddress {12}Procedure (),Long,Virtual')
WHEN  (52) ('Base32Encode {10}Procedure (Long pOptions=0, <<String pAlphabet>),bool,proc,virtual')
WHEN  (53) ('Base32Decode {10}Procedure (Long pOptions=0, <<String pAlphabet>),bool,proc,virtual')
WHEN  (54) ('Base64Encode {10}Procedure (Long pOptions=0),bool, proc,Virtual')
WHEN  (55) ('Base64Encode {10}Procedure (*string pText, *long pLen),bool, proc, virtual')
WHEN  (56) ('Base64Decode {10}Procedure (),bool, proc, virtual')
WHEN  (57) ('Base64Decode {10}Procedure (*string pText, *long pLen),bool, proc, virtual')
WHEN  (58) ('Base85Encode {10}Procedure (Long pOptions=0),virtual')
WHEN  (59) ('Base85Decode {10}Procedure (),Long,virtual')
WHEN  (60) ('QuotedPrintableEncode Procedure (), virtual')
WHEN  (61) ('QuotedPrintableDecode Procedure (), virtual')
WHEN  (62) ('EncodedWordDecode     Procedure (), virtual')
WHEN  (63) ('EncodedWordEncode     Procedure (<<String pCharset>,long pEncoding=2),virtual')
WHEN  (64) ('JsonEncode {12}Procedure (Long pOptions=0), virtual')
WHEN  (65) ('JsonDecode {12}Procedure (), Long,Proc,virtual')
WHEN  (66) ('XMLEncode {13}Procedure (Long pOptions=0), virtual')
WHEN  (67) ('XMLDecode {13}Procedure (), virtual')
WHEN  (68) ('ZeroXEncode {11}Procedure (),Virtual')
WHEN  (69) ('ZeroXDecode {11}Procedure (),Virtual')
WHEN  (70) ('Free {18}Procedure (), virtual')
WHEN  (71) ('Free {18}Procedure (Long pLines), virtual')
WHEN  (72) ('Free {18}Procedure (Long pLines, Long pForce), virtual')
WHEN  (73) ('FreeLines {13}Procedure (), virtual')
WHEN  (74) ('ClipLen {15}Procedure (), long, virtual')
WHEN  (75) ('ClipLength {12}Procedure (), long, virtual')
WHEN  (76) ('Crop {18}Procedure (long pStart=1, long pEnd=0), Virtual')
WHEN  (77) ('Instring {14}Procedure (string pSearchValue), long, virtual')
WHEN  (78) ('Instring {14}Procedure (*string pSearchValue), long, virtual')
WHEN  (79) ('Instring {14}Procedure (string pSearchValue, long pStep), long, virtual')
WHEN  (80) ('Instring {14}Procedure (*string pSearchValue, long pStep), long, virtual')
WHEN  (81) ('Instring {14}Procedure (string pSearchValue, long pStep=1, long pStart), long, virtual')
WHEN  (82) ('Instring {14}Procedure (*string pSearchValue, long pStep=1, long pStart), long, virtual')
WHEN  (83) ('Instring {14}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd), long, virtual')
WHEN  (84) ('Instring {14}Procedure (*string pSearchValue, long pStep=1, long pStart=1, long pEnd), long, virtual')
WHEN  (85) ('Instring {14}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd=0, long pNocase), long, virtual')
WHEN  (86) ('Instring {14}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd=0, long pNocase=0, long pWholeWord), long, virtual')
WHEN  (87) ('Match {17}Procedure (string pRegEx, Long pStart, Long pEnd, long pMode=Match:Regular, long pNoCase=0), long, virtual')
WHEN  (88) ('FindMatch {13}Procedure (string pRegEx,*long pStart, *long pEnd, long pMode=Match:Regular, long pNoCase=0), String, virtual')
WHEN  (89) ('FindMatchPosition     Procedure (string pRegEx,*long pStart, *long pEnd, long pMode=Match:Regular, long pNoCase=0), virtual')
WHEN  (90) ('Count {17}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd=0, long pNoCase=0, bool softClip=true, long pOverlap=true), long, virtual')
WHEN  (91) ('Capitalize {12}Procedure (long pCount=1, long pStartPos=1, long pEndPos=0,<<String pCharlist>), virtual')
WHEN  (92) ('ErrorTrap {13}Procedure (string methodName, string errorMessage, byte forceLog=false), virtual')
WHEN  (93) ('ExtensionOnly {9}Procedure (<<string fPath>),String, virtual')
WHEN  (94) ('FormatMessage {9}Procedure (long err), string, virtual')
WHEN  (95) ('GetValue {14}Procedure (), string, virtual')
WHEN  (96) ('GetValue {14}Procedure (long maxLen), string, virtual')
WHEN  (97) ('GetVal {16}Procedure (), string, virtual')
WHEN  (98) ('GetLine {15}Procedure (long pLineNumber), string, virtual')
WHEN  (99) ('GetLines {14}Procedure (long pFromLineNumber, long pToLineNumber, string pSeparator),string,virtual')
WHEN  (100) ('GetBufferLength       Procedure (),long,Virtual')
WHEN  (101) ('InLine {16}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd=0, long pNocase=0, long pWholeLine=0, long pWhere=st:anywhere, long pClip=st:Clip),Long,virtual')
WHEN  (102) ('SetLine {15}Procedure (long pLineNumber,String pValue),virtual')
WHEN  (103) ('SetLine {15}Procedure (long pLineNumber,*String pValue),virtual')
WHEN  (104) ('SetLine {15}Procedure (long pLineNumber,StringTheory pValue),virtual')
WHEN  (105) ('AddLine {15}Procedure (long pLineNumber,String pValue),virtual')
WHEN  (106) ('AddLine {15}Procedure (long pLineNumber,*String pValue),virtual')
WHEN  (107) ('AddLine {15}Procedure (String pValue),virtual')
WHEN  (108) ('AddLine {15}Procedure (*String pValue),virtual')
WHEN  (109) ('DeleteLine {12}Procedure (long pLineNumber), long, proc, virtual')
WHEN  (110) ('RemoveLines {11}Procedure (), long, proc, virtual')
WHEN  (111) ('RemoveLines {11}Procedure (String pAlphabet), long, proc, virtual')
WHEN  (112) ('SerializeQueue        Procedure (*Queue pQueue,<<String pRecordBoundary>,<<string pFieldBoundary>,<<string pQuotestart>,<<string pQuoteEnd>,Long pLevel=1,Long pFree=true,long pOptions=0),virtual')
WHEN  (113) ('SerializeGroup        Procedure (*Group pGroup,<<string pBoundary>,<<string pQuotestart>,<<string pQuoteEnd>,Long pLevel=1,Long pFree=true,long pOptions=0),long,proc,virtual')
WHEN  (114) ('SerializeQueue        Procedure (*Queue pQueue,<<string pRecordBoundary>,*StringTheory pFieldBoundary,<<string pQuotestart>,<<string pQuoteEnd>,Long pLevel=1,Long pFree=true,long pOptions=0),virtual')
WHEN  (115) ('SerializeGroup        Procedure (*Group pGroup,*StringTheory pBoundary,<<string pQuotestart>,<<string pQuoteEnd>,Long pLevel=1,Long pFree=true,long pOptions=0),long,proc,virtual')
WHEN  (116) ('Join {18}Procedure (string pBoundary,<<string pQuotestart>,<<string pQuoteEnd>,long pAlwaysQuote=false),virtual')
WHEN  (117) ('Length {16}Procedure (), long, virtual')
WHEN  (118) ('LengthA {15}Procedure (), long, virtual  ')
WHEN  (119) ('Len {19}Procedure (), long, virtual')
WHEN  (120) ('Capacity {14}Procedure (), long, virtual')
WHEN  (121) ('SpareCapacity {9}Procedure (), long, virtual')
WHEN  (122) ('ReleaseSpareCapacity  Procedure (), virtual')
WHEN  (123) ('ReserveCapacity        Procedure (Long strLen), virtual')
WHEN  (124) ('Chars {17}Procedure (Long pEncoding=-1, <<String pStr>),Long,Virtual ')
WHEN  (125) ('_Malloc {15}Procedure (Long strLen, Long pForce=false, Long pSilent=true), virtual')
WHEN  (126) ('MD5 {19}Procedure (Long pFormat=st:EncHex ,<<*String pStr>,Long pLength=0), string, virtual')
WHEN  (127) ('Prepend {15}Procedure (string newValue, long pClip), virtual')
WHEN  (128) ('Prepend {15}Procedure (string newValue, long pClip=st:NoClip, string pSep), virtual')
WHEN  (129) ('Prepend {15}Procedure (string newValue), virtual')
WHEN  (130) ('Prepend {15}Procedure (*string newValue), virtual')
WHEN  (131) ('Prepend {15}Procedure (StringTheory newValue, long pOptions = st:NoClip, string pSep), virtual')
WHEN  (132) ('Prepend {15}Procedure (stringtheory newValue, String pSep), virtual')
WHEN  (133) ('Prepend {15}Procedure (stringtheory newValue), virtual')
WHEN  (134) ('SeedRandom {12}Procedure (), virtual')
WHEN  (135) ('Random {16}Procedure (long pLength=16, long pFlags=0, <<String pAlphabet>),String, Proc, virtual')
WHEN  (136) ('SetRandom {13}Procedure (long pLength=16, long pFlags=0, <<String pAlphabet>),long, Proc, virtual')
WHEN  (137) ('MakeGuid {14}Procedure (long pLength=16, long pFlags=st:Upper+st:Number),String, Proc, virtual')
WHEN  (138) ('MakeGuid4 {13}Procedure (Long pOptions=0),String, Proc, virtual')
WHEN  (139) ('Records {15}Procedure (), long, virtual')
WHEN  (140) ('Replace {15}Procedure (string pOldValue, string pNewValue, long pCount=0, long pStart=1, long pEnd=0, long pNoCase=0, bool pRecursive), Long, Proc, virtual')
WHEN  (141) ('Replace {15}Procedure (string pOldValue, string pNewValue, long pCount=0, long pStart=1, long pEnd=0, long pNoCase=0), Long, Proc, virtual')
WHEN  (142) ('ReplaceBetween        Procedure (string pLeft, <<string pRight>, string pOldValue, string pNewValue, long pCount=0, long pStart=1, long pEnd=0, long pNoCase=0, long pReplaceAll=false), Long, Proc, virtual')
WHEN  (143) ('ReplaceExceptBetween  Procedure (string pLeft, <<string pRight>, string pOldValue, string pNewValue, long pCount=0, long pStart=1, long pEnd=0, long pNoCase=0), Long, Proc, virtual')
WHEN  (144) ('ReplaceSingleChars    Procedure (string pOldChars, string pNewChars),long,proc, virtual')
WHEN  (145) ('ReplaceSingleChars    Procedure (string pOldChars, string pNewChars, bool pOnceOnly),long,proc, virtual')
WHEN  (146) ('ConvertTabs {11}Procedure (long pTabSize=8,<<string pLineEnding>)')
WHEN  (147) ('RemoveHTML {12}Procedure (),Virtual')
WHEN  (148) ('SetLength {13}Procedure (Long strLen, Long pForce=false), virtual')
WHEN  (149) ('AdjustLength {10}Procedure (Long pLen), Long, Proc, virtual')
WHEN  (150) ('Slice {17}Procedure (Long pStart=1, Long pEnd=0),String, virtual')
WHEN  (151) ('Split {17}Procedure (string pSplitStr,<<string pQuotestart>,<<string pQuoteEnd>, bool removeQuotes = false, bool pClip=st:NoClip, bool pLeft=false, <<string pSeparator>,Long pNested=false), virtual')
WHEN  (152) ('SplitEvery {12}Procedure (long numChars), virtual')
WHEN  (153) ('SplitIntoWords        Procedure (long startPos = 1, long textType=ST:TEXT, <<String pCharlist>,Long pSmartWords=true)')
WHEN  (154) ('SplitByMatch {10}Procedure (string pRegEx, long pNoCase=0), virtual')
WHEN  (155) ('SplitBetween {10}Procedure (string pLeft, string pRight, long pNoCase=false, long pExclusive=true), virtual')
WHEN  (156) ('Sort {18}Procedure (Long pSortType,string pSplitStr,<<string pQuotestart>,<<string pQuoteEnd>, bool pClip=st:NoClip, bool pLeft=false),Virtual')
WHEN  (157) ('Sort {18}Procedure (Long pSortType),Virtual')
WHEN  (158) ('Filter {16}Procedure (string pInclude, string pExclude, long pNoCase=st:NoCase, long pClip=st:Clip),virtual')
WHEN  (159) ('Sub {19}Procedure (long pStart=1, long pLength=1), string, virtual')
WHEN  (160) ('GetCodePageFromCharset Procedure(<<Long pCharSet>),Long, virtual')
WHEN  (161) ('ToCstring {13}Procedure (), *cstring, virtual')
WHEN  (162) ('Trace {17}Procedure (Queue pQueue), virtual')
WHEN  (163) ('Trace {17}Procedure (<<string errMsg>), virtual')
WHEN  (164) ('Upper {17}Procedure (<<String pQuote>, <<String pQuoteEnd>), virtual')
WHEN  (165) ('Lower {17}Procedure (<<String pQuote>, <<String pQuoteEnd>), virtual')
WHEN  (166) ('FileNameOnly {10}Procedure (<<string fPath>,Long pIncludeExtension=true), string, virtual')
WHEN  (167) ('PathOnly {14}Procedure (<<string fPath>), string, proc, virtual')
WHEN  (168) ('UrlProtocolOnly       Procedure (<<string pURL>), string, proc, virtual')
WHEN  (169) ('UrlHostOnly {11}Procedure (<<string pURL>,Long pIncludePort=true), string, proc, virtual')
WHEN  (170) ('UrlPortOnly {11}Procedure (<<string pURL>), long, proc, virtual')
WHEN  (171) ('UrlPathOnly {11}Procedure (<<string pURL>, Long pIncludeFile=true), string, proc, virtual')
WHEN  (172) ('UrlFileOnly {11}Procedure (<<string pURL>), string, proc, virtual')
WHEN  (173) ('UrlParametersOnly     Procedure (<<string pURL>), string, proc, virtual')
WHEN  (174) ('UrlParameter {10}Procedure (String pParameter,<<string pURL>), string, proc, virtual')
WHEN  (175) ('LoadFile {14}Procedure (string fileName,Long pOffset=0, Long pLength=0, Long pRemoveBOM=false), long, proc, virtual')
WHEN  (176) ('SaveFile {14}Procedure (string fileName, bool pAppendFlag=false), long, proc, virtual')
WHEN  (177) ('SaveFile {14}Procedure (*string WriteString, string fileName, bool pAppendFlag, long dataLen=0), long, proc, virtual')
WHEN  (178) ('SaveFileA {13}Procedure (string WriteString, string fileName, bool pAppendFlag=false), long, proc, virtual')
WHEN  (179) ('SetEncodingFromBOM    Procedure (Long pRemoveBOM=true),Long,Proc,Virtual')
WHEN  (180) ('AddBOM {16}Procedure (Long pEncoding=-1),Virtual')
WHEN  (181) ('Before {16}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (182) ('BeforeLast {12}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (183) ('BeforeNth {13}Procedure (string pSearchValue, long pOccurrence, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (184) ('SetBefore {13}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0, long pClearIfNotFound=false),long,proc, virtual')
WHEN  (185) ('SetBeforeLast {9}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0, long pClearIfNotFound=false),long,proc, virtual')
WHEN  (186) ('SetBeforeNth {10}Procedure (string pSearchValue, long pOccurrence, long pStart=1, long pEnd=0, long pNoCase=0, long pClearIfNotFound=false),long,proc, virtual')
WHEN  (187) ('Between {15}Procedure (string pLeft, string pRight,long pStart=1, long pEnd=0, long pNoCase=0, long pExclusive=true), string, virtual')
WHEN  (188) ('FindBetween {11}Procedure (string pLeft, string pRight, *long pStart, *long pEnd, bool pNoCase=false, long pExclusive=true), string, virtual')
WHEN  (189) ('SetBetween {12}Procedure (string pLeft, string pRight, long pStart=1, long pEnd=0, long pNoCase=0, long pExclusive=true, long pClearIfNotFound=false),long, proc, virtual')
WHEN  (190) ('FindBetweenPosition   Procedure (string pLeft, string pRight, *long pStart, *long pEnd, bool pNoCase=false, long pExclusive=true), virtual')
WHEN  (191) ('After {17}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (192) ('AfterLast {13}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (193) ('AfterNth {14}Procedure (string pSearchValue, long pOccurrence, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (194) ('SetAfter {14}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0, long pClearIfNotFound=false),long,proc virtual')
WHEN  (195) ('SetAfterLast {10}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0, long pClearIfNotFound=false),long,proc virtual')
WHEN  (196) ('SetAfterNth {11}Procedure (string pSearchValue, long pOccurrence, long pStart=1, long pEnd=0, long pNoCase=0, long pClearIfNotFound=false),long,proc virtual')
WHEN  (197) ('ToBlob {16}Procedure (*blob blobField), long, proc, virtual')
WHEN  (198) ('FromBlob {14}Procedure (*blob blobField), long, proc, virtual')
WHEN  (199) ('ChangeBase {12}Procedure (Long pBaseFrom,Long pBaseTo),long,proc,virtual')
WHEN  (200) ('LongDivision {10}Procedure(Long pDivisor, *Long rRemainder, Long pBase),long,proc,virtual')
WHEN  (201) ('AnsiToUtf16 {11}Procedure (*string strAnsi, *long unicodeChars, ulong CodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (202) ('Utf16ToAnsi {11}Procedure (*string unicodeString, *long ansiLen, long unicodeChars=-1, ulong CodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (203) ('Utf8To16 {14}Procedure (*string strUtf8, *long unicodeChars), *string, virtual')
WHEN  (204) ('Utf16To8 {14}Procedure (*string unicodeString, *long utf8Len, long unicodeChars=-1), *string, virtual')
WHEN  (205) ('Utf8ToAnsi {12}Procedure (*string strUtf8, *long ansiLen, long pCodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (206) ('AnsiToUtf8 {12}Procedure (*string strAnsi, *long utf8Len, long pCodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (207) ('apiUtf8ToAnsi {9}Procedure (*string strUtf8, *long ansiLen), *string, virtual')
WHEN  (208) ('apiAnsiToUtf8 {9}Procedure (*string strAnsi, *long utf8Len), *string, virtual')
WHEN  (209) ('ToAnsi {16}Procedure (long encoding=0, long pCodePage=st:CP_US_ASCII), long, proc, virtual')
WHEN  (210) ('ToAnsi {16}Procedure (long encoding=0, long pCodePage=st:CP_US_ASCII,Long pBlockSize), long, proc, virtual')
WHEN  (211) ('ToUnicode {13}Procedure (long encoding=st:EncodeUtf8, long pCodePage=st:CP_US_ASCII), long, proc, virtual')
WHEN  (212) ('DecodeHexInline       Procedure (long pCodePage=st:CP_US_ASCII),Virtual')
WHEN  (213) ('DecodeHexInline       Procedure (string pId, Long pLength, long pCodePage=st:CP_US_ASCII),Virtual')
WHEN  (214) ('Utf16ToUtf8Char       Procedure (String p_utf16Char,*Long rLen),String,Virtual')
WHEN  (215) ('Normalize {13}Procedure (Long pForm=st:NFKD,Long pPreserveEncoding=true),Long,Proc,Virtual')
WHEN  (216) ('IsValidUtf8 {11}Procedure(),Long,Virtual')
WHEN  (217) ('DecToBase {13}Procedure (long num, long base=16, long lowerCase=1), string, virtual')
WHEN  (218) ('BaseToDec {13}Procedure (string num, long base=16), long, virtual')
WHEN  (219) ('ByteToHex {13}Procedure (byte pByte), string, virtual')
WHEN  (220) ('HexToByte {13}Procedure (string hexVal), byte, virtual')
WHEN  (221) ('LongToHex {13}Procedure (long pLong), string, virtual')
WHEN  (222) ('StringToHex {11}Procedure (*string binData,Long pLen=0,Long pCase=0), *string, virtual')
WHEN  (223) ('StringToHex {11}Procedure (string binData,Long pLen=0,Long pCase=0), *string, virtual')
WHEN  (224) ('HexToString {11}Procedure (string hexData), *string, virtual')
WHEN  (225) ('ToHex {17}Procedure (Long pCase=0,Long pSpacer=0), virtual     ')
WHEN  (226) ('FromHex {15}Procedure (), virtual')
WHEN  (227) ('WrapText {14}Procedure(long wrapAt=80, bool keepExistingBreaks=true, bool pleft=false), virtual')
WHEN  (228) ('StrCpy {16}Procedure(*string pIn, *string pOut, bool pClip=st:Clip), long, proc, virtual')
WHEN  (229) ('ToBytes {15}Procedure (*byte pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (230) ('ToBytes {15}Procedure (*short pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (231) ('ToBytes {15}Procedure (*ushort pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (232) ('ToBytes {15}Procedure (*long pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (233) ('ToBytes {15}Procedure (*ulong pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (234) ('ToBytes {15}Procedure (*sreal pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (235) ('ToBytes {15}Procedure (*real pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (236) ('ToBytes {15}Procedure (*decimal pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (237) ('ToBytes {15}Procedure (*cstring pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (238) ('ToBytes {15}Procedure (*pstring pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (239) ('ToBytes {15}Procedure (*string pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (240) ('FromBytes {13}Procedure (*string pSrc, *byte pDest, long pOffset=1), virtual')
WHEN  (241) ('FromBytes {13}Procedure (*string pSrc, *short pDest, long pOffset=1), virtual')
WHEN  (242) ('FromBytes {13}Procedure (*string pSrc, *ushort pDest, long pOffset=1), virtual')
WHEN  (243) ('FromBytes {13}Procedure (*string pSrc, *long pDest, long pOffset=1), virtual')
WHEN  (244) ('FromBytes {13}Procedure (*string pSrc, *ulong pDest, long pOffset=1), virtual')
WHEN  (245) ('FromBytes {13}Procedure (*string pSrc, *sreal pDest, long pOffset=1), virtual')
WHEN  (246) ('FromBytes {13}Procedure (*string pSrc, *real pDest, long pOffset=1), virtual')
WHEN  (247) ('FromBytes {13}Procedure (*string pSrc, *decimal pDest, long pOffset=1), virtual')
WHEN  (248) ('FromBytes {13}Procedure (*string pSrc, *cstring pDest, long pOffset=1), virtual')
WHEN  (249) ('FromBytes {13}Procedure (*string pSrc, *string pDest, long pOffset=1), virtual')
WHEN  (250) ('FromBytes {13}Procedure (*string pSrc, *pstring pDest, long pOffset=1), virtual')
WHEN  (251) ('SetBytes {14}Procedure (*byte pSrc), virtual')
WHEN  (252) ('SetBytes {14}Procedure (*short pSrc), virtual')
WHEN  (253) ('SetBytes {14}Procedure (*ushort pSrc), virtual')
WHEN  (254) ('SetBytes {14}Procedure (*long pSrc), virtual')
WHEN  (255) ('SetBytes {14}Procedure (*ulong pSrc), virtual')
WHEN  (256) ('SetBytes {14}Procedure (*sreal pSrc), virtual')
WHEN  (257) ('SetBytes {14}Procedure (*real pSrc), virtual')
WHEN  (258) ('SetBytes {14}Procedure (*decimal pSrc), virtual')
WHEN  (259) ('SetBytes {14}Procedure (*cstring pSrc), virtual')
WHEN  (260) ('SetBytes {14}Procedure (*string pSrc), virtual')
WHEN  (261) ('SetBytes {14}Procedure (*pstring pSrc), virtual')
WHEN  (262) ('GetBytes {14}Procedure (*byte pVal, long pOffset=1), virtual')
WHEN  (263) ('GetBytes {14}Procedure (*short pVal, long pOffset=1), virtual')
WHEN  (264) ('GetBytes {14}Procedure (*ushort pVal, long pOffset=1), virtual')
WHEN  (265) ('GetBytes {14}Procedure (*long pVal, long pOffset=1), virtual')
WHEN  (266) ('GetBytes {14}Procedure (*ulong pVal, long pOffset=1), virtual')
WHEN  (267) ('GetBytes {14}Procedure (*sreal pVal, long pOffset=1), virtual')
WHEN  (268) ('GetBytes {14}Procedure (*real pVal, long pOffset=1), virtual')
WHEN  (269) ('GetBytes {14}Procedure (*decimal pVal, long pOffset=1), virtual')
WHEN  (270) ('GetBytes {14}Procedure (*cstring pVal, long pOffset=1), virtual')
WHEN  (271) ('GetBytes {14}Procedure (*string pVal, long pOffset=1), virtual')
WHEN  (272) ('GetBytes {14}Procedure (*pstring pVal, long pOffset=1), virtual')
WHEN  (273) ('SetBytes {14}Procedure (*? pVal, string pType, long pOffset=1), bool, proc, virtual')
WHEN  (274) ('GetBytes {14}Procedure (*? pVal, string pType, long pOffset=1), bool, proc, virtual')
WHEN  (275) ('FindWord {14}Procedure(long pWordNumber,long startPos = -1, long textType=ST:TEXT,*Long pStart, *Long pEnd,<<String pCharlist>,Long pSmartWords=true), string, virtual')
WHEN  (276) ('GetWord {15}Procedure (long pWordNumber,long startPos = -1, long textType=ST:TEXT, <<String pCharlist>,Long pSmartWords=true), string, virtual')
WHEN  (277) ('WordStart {13}Procedure (long pStartPos=1, long textType=ST:TEXT,Long pDir=st:Forwards,<<String pCharlist>), long, virtual')
WHEN  (278) ('WordEnd {15}Procedure (long pStartPos=1, long textType=ST:TEXT,<<String pCharlist>,Long pSmartWords=true), long, virtual')
WHEN  (279) ('CountWords {12}Procedure (long startPos = 1, long textType=ST:TEXT,<<String pCharlist>,Long pSmartWords=true), long, virtual')
WHEN  (280) ('RemoveAttributes      Procedure (String pTag,Long pCount=0), virtual')
WHEN  (281) ('RemoveXMLPrefixes     Procedure(), virtual')
WHEN  (282) ('HtmlEntityToDec       Procedure(),virtual')
WHEN  (283) ('DecEntityToChar       Procedure(),Long,Proc,Virtual')
WHEN  (284) ('CharToDecEntity       Procedure(long pFrom=128, long pTo=255),Virtual')
WHEN  (285) ('Remove {16}Procedure(string pLeft), Long,Proc,virtual')
WHEN  (286) ('Remove {16}Procedure(string pLeft,string pRight), Long,Proc,virtual')
WHEN  (287) ('Remove {16}Procedure(string pLeft,<<string pRight>,long pNoCase), Long,Proc,virtual')
WHEN  (288) ('Remove {16}Procedure(string pLeft,<<string pRight>,long pNoCase=0,long pContentsOnly), Long,Proc,virtual')
WHEN  (289) ('Remove {16}Procedure(string pLeft,<<string pRight>,long pNoCase=0,long pContentsOnly=0, long pCount), Long,Proc,virtual')
WHEN  (290) ('RemoveFromPosition    Procedure(long pPosition, long pLength), Long,Proc,virtual')
WHEN  (291) ('RemoveLeading {9}Procedure(String pStr, Long pNoCase=0),  bool,Proc,virtual')
WHEN  (292) ('Top {19}Procedure(long pLength), Long,Proc,virtual')
WHEN  (293) ('Tail {18}Procedure(long pLength), Long,Proc,virtual')
WHEN  (294) ('Clip {18}Procedure (), virtual')
WHEN  (295) ('Clip {18}Procedure (String pAlphabet), virtual')
WHEN  (296) ('Trim {18}Procedure (), virtual')
WHEN  (297) ('Trim {18}Procedure (String pAlphabet), virtual')
WHEN  (298) ('Reverse {15}Procedure (String pString),String,Proc Virtual')
WHEN  (299) ('Reverse {15}Procedure (),Virtual')
WHEN  (300) ('Left {18}Procedure(Long pLength=0,Long pwhat=st:spaces,<<String pPad>),String, virtual')
WHEN  (301) ('SetLeft {15}Procedure(Long pLength=0,Long pwhat=st:spaces,<<String pPad>), virtual')
WHEN  (302) ('Right {17}Procedure(Long pLength=0,Long pwhat=st:spaces,<<String pPad>),String, virtual')
WHEN  (303) ('SetRight {14}Procedure(Long pLength=0,Long pwhat=st:spaces,<<String pPad>), virtual')
WHEN  (304) ('All {19}Procedure(Long pLength=255),String, virtual')
WHEN  (305) ('SetAll {16}Procedure(Long pLength=255), virtual')
WHEN  (306) ('Squeeze {15}Procedure (long textType=ST:TEXT,<<String pCharlist>,Long pSmartWords=true), virtual')
WHEN  (307) ('ContainsADigit        Procedure (), bool, virtual')
WHEN  (308) ('IsAllDigits {11}Procedure (), bool, virtual')
WHEN  (309) ('IsEmpty {15}Procedure (), bool, virtual')
WHEN  (310) ('IsUpper {15}Procedure (), bool, virtual')
WHEN  (311) ('IsAllUpper {12}Procedure (), bool, virtual')
WHEN  (312) ('IsLower {15}Procedure (), bool, virtual')
WHEN  (313) ('IsAllLower {12}Procedure (), bool, virtual')
WHEN  (314) ('ContainsA {13}Procedure (String pAlphabet, <<String pTestString>,Long pClip=st:Clip), bool, virtual')
WHEN  (315) ('ContainsByte {10}Procedure (Byte pByte), bool, virtual')
WHEN  (316) ('ContainsByte {10}Procedure (Byte pByte, *string pTestString), bool, virtual')
WHEN  (317) ('ContainsByte {10}Procedure (Byte pByte,  string pTestString), bool, virtual')
WHEN  (318) ('ContainsChar {10}Procedure (String pChar), bool, virtual')
WHEN  (319) ('ContainsChar {10}Procedure (String pChar, *string pTestString), bool, virtual')
WHEN  (320) ('ContainsChar {10}Procedure (String pChar,  string pTestString), bool, virtual')
WHEN  (321) ('IsAscii {15}Procedure (), bool, virtual')
WHEN  (322) ('IsAll {17}Procedure (String pAlphabet, <<String pTestString>,Long pClip=st:Clip), bool, virtual')
WHEN  (323) ('RemoveChars {11}Procedure (String pAlphabet), long, proc, virtual')
WHEN  (324) ('KeepChars {13}Procedure (String pAlphabet, String pReplacementChar), long, proc, virtual')
WHEN  (325) ('KeepChars {13}Procedure (String pAlphabet), long, proc, virtual')
WHEN  (326) ('MatchBrackets {9}Procedure (String pLeftBracket, String pRightBracket, Long pStart=1),Long,virtual')
WHEN  (327) ('_SwitchEndian {9}Procedure (), virtual')
WHEN  (328) ('BigEndian {13}Procedure (), virtual')
WHEN  (329) ('LittleEndian {10}Procedure (), virtual')
WHEN  (330) ('SwitchEndian {10}Procedure (ulong x), long, virtual')
WHEN  (331) ('BigEndian {13}Procedure (ulong x), long, virtual')
WHEN  (332) ('LittleEndian {10}Procedure (ulong x), long, virtual')
WHEN  (333) ('ReverseByteOrder      Procedure (), virtual')
WHEN  (334) ('Str {19}Procedure (), string, virtual')
WHEN  (335) ('Str {19}Procedure (string newValue),  string, proc, virtual')
WHEN  (336) ('Str {19}Procedure (*string newValue), string, proc, virtual')
WHEN  (337) ('SetSlice {14}Procedure (long pStart=1, long pEnd=0, string newValue), virtual')
WHEN  (338) ('Insert {16}Procedure (long pStart, stringTheory insertValue), virtual')
WHEN  (339) ('Insert {16}Procedure (long pStart, string insertValue), virtual')
WHEN  (340) ('Insert {16}Procedure (long pStart, *string insertValue), virtual')
WHEN  (341) ('InsertEvery {11}Procedure (long numChars, string insertValue), virtual')
WHEN  (342) ('InsertEvery {11}Procedure (long numChars, *string insertValue), virtual')
WHEN  (343) ('Quote {17}Procedure (<<string pQuotestart>,<<string pQuoteEnd>), virtual')
WHEN  (344) ('UnQuote {15}Procedure (<<string pQuotestart>,<<string pQuoteEnd>), virtual')
WHEN  (345) ('FindChar {14}Procedure (string pSearchValue), long, virtual')
WHEN  (346) ('FindChar {14}Procedure (string pSearchValue, long pStart), long, virtual')
WHEN  (347) ('FindChar {14}Procedure (string pSearchValue, long pStart=1, long pEnd), long, virtual')
WHEN  (348) ('FindChar {14}Procedure (string pSearchValue, long pStart=1, long pEnd=0, String p_Text), long, virtual')
WHEN  (349) ('FindChar {14}Procedure (string pSearchValue, long pStart=1, long pEnd=0, *String p_Text), long, virtual')
WHEN  (350) ('FindByte {14}Procedure (byte pSearchValue), long, virtual')
WHEN  (351) ('FindByte {14}Procedure (byte pSearchValue, long pStart), long, virtual')
WHEN  (352) ('FindByte {14}Procedure (byte pSearchValue, long pStart=1, long pEnd), long, virtual')
WHEN  (353) ('FindByte {14}Procedure (byte pSearchValue, long pStart=1, long pEnd=0, String p_Text), long, virtual')
WHEN  (354) ('FindByte {14}Procedure (byte pSearchValue, long pStart=1, long pEnd=0, *String p_Text), long, virtual')
WHEN  (355) ('CountByte {13}Procedure (byte pSearchValue), long, virtual')
WHEN  (356) ('CountByte {13}Procedure (byte pSearchValue, long pStart), long, virtual')
WHEN  (357) ('CountByte {13}Procedure (byte pSearchValue, long pStart=1, long pEnd), long, virtual')
WHEN  (358) ('replaceByte {11}Procedure (byte pOld, byte pNew), long, proc, virtual')
WHEN  (359) ('removeByte {12}Procedure (byte pOld), long, proc, virtual')
WHEN  (360) ('_memChrs {14}Procedure (*string pSearchValue, long pAddr, long pMaxStartAddr), long, virtual')
WHEN  (361) ('_memiChrs {13}Procedure (*string pSearchValue, long pAddr, long pMaxStartAddr), long, virtual')
WHEN  (362) ('_memiChr {14}Procedure (long buf, long c, unsigned count), long, virtual')
WHEN  (363) ('FindEndOfString       Procedure (Long pEncoding, Long pStringAddress, Long pMaxLength=255),long ,virtual')
WHEN  (364) ('FindCharsAddr {9}Procedure (*string pSearchValue, long pAddr, long pLen), long, virtual')
WHEN  (365) ('FindChars {13}Procedure (*string pSearchValue),long, virtual')
WHEN  (366) ('FindChars {13}Procedure (string pSearchValue), long, virtual')
WHEN  (367) ('FindChars {13}Procedure (*string pSearchValue, long pStart), long, virtual')
WHEN  (368) ('FindChars {13}Procedure (string pSearchValue,  long pStart), long, virtual')
WHEN  (369) ('FindChars {13}Procedure (*string pSearchValue, long pStart=1, long pEnd), long, virtual')
WHEN  (370) ('FindChars {13}Procedure (string pSearchValue,  long pStart=1, long pEnd), long, virtual')
WHEN  (371) ('FindChars {13}Procedure (*string pSearchValue, long pStart=1, long pEnd=0, *String p_Text), long, virtual')
WHEN  (372) ('FindChars {13}Procedure (string pSearchValue,  long pStart=1, long pEnd=0, *String p_Text), long, virtual')
WHEN  (373) ('FindChars {13}Procedure (string pSearchValue,  long pStart=1, long pEnd=0, String p_Text), long, virtual')
WHEN  (374) ('FindNth {15}Procedure (string pSearchValue, long pOccurrence, long pStart=1, long pEnd=0, long pNocase=0), long, virtual')
WHEN  (375) ('ReplaceNth {12}Procedure (string pOldValue, string pNewValue, long pOccurrence, long pStart=1, long pEnd=0, long pNocase=0) , long, virtual')
WHEN  (376) ('FindLast {14}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNocase=0), long, virtual')
WHEN  (377) ('ReplaceLast {11}Procedure (string pOldValue, string pNewValue, long pStart=1, long pEnd=0, long pNocase=0) , long, virtual')
WHEN  (378) ('ColorToHex {12}Procedure (string pColor, bool pAddHash=false), string, virtual')
WHEN  (379) ('ColorFromHex {10}Procedure (String pColor),Long, virtual')
WHEN  (380) ('ColorToLong {11}Procedure (String pColor),Long, virtual')
WHEN  (381) ('_ColorToHex {11}Procedure (long pAddHash=false), virtual')
WHEN  (382) ('_ColorFromHex {9}Procedure (string pColor),Long, virtual')
WHEN  (383) ('_ColorFromCSL {9}Procedure (string pColor),Long, virtual')
WHEN  (384) ('UrlEncode {13}Procedure (String p_Text, long flags, String pDelimiter,String pSpace,String pAlphabet), string, virtual')
WHEN  (385) ('UrlEncode {13}Procedure (long flags =0,<<String pDelimiter>,<<String pSpace>,<<String pAlphabet>), virtual')
WHEN  (386) ('UrlDecode {13}Procedure (<<String pDelimiter>,<<String pSpace>), virtual')
WHEN  (387) ('GuidEncode {12}Procedure (long flags = 0) ,Virtual')
WHEN  (388) ('GuidDecode {12}Procedure () {15},Virtual')
WHEN  (389) ('CleanFileName {9}Procedure (<<string pFileName>, <<string pReplaceChar>), string, proc, virtual')
WHEN  (390) ('PeekRam {15}Procedure(Long pFormat=st:Decimal),Virtual')
WHEN  (391) ('PeekRam {15}Procedure(uLong pAdr,Long pLen, Long pFormat=st:Decimal),Virtual')
WHEN  (392) ('PeekRam {15}Procedure(stringTheory pResult,uLong pAdr,Long pLen, Long pFormat=st:Decimal),Virtual')
WHEN  (393) ('loadlibs {14}Procedure(),Long,Proc,Virtual')
WHEN  (394) ('LoadNormalize {9}Procedure(),Long,Proc,Virtual')
WHEN  (395) ('gzip {18}Procedure(Long pLevel=5),Long,Virtual,Proc')
WHEN  (396) ('gunzip {16}Procedure(Long pOffset=0),Long,Virtual,Proc')
WHEN  (397) ('MergeXml {14}Procedure(String pNew, Long pWhere),Virtual')
WHEN  (398) ('LineEndings {11}Procedure(Long pEndings=st:windows,Long pFrom=0), Virtual')
WHEN  (399) ('FormatTime {12}PROCEDURE (String pValue, String pFormat),String,Virtual')
WHEN  (400) ('FormatTime {12}PROCEDURE (String pFormat),Virtual')
WHEN  (401) ('DeformatTime {10}PROCEDURE (String pValue),String, Virtual')
WHEN  (402) ('DeformatTime {10}PROCEDURE (),Virtual')
WHEN  (403) ('IsTime {16}PROCEDURE (String pValue),Long, Virtual')
WHEN  (404) ('IsTime {16}PROCEDURE (),Long, Virtual')
WHEN  (405) ('StartsWith {12}Procedure (String pStr,Long pCase=True,Long pClip=st:Clip),Long,Virtual')
WHEN  (406) ('EndsWith {14}Procedure (String pStr,Long pCase=True,Long pClip=st:Clip),Long,Virtual')
WHEN  (407) ('ConvertOemToAnsi      Procedure(),Virtual')
WHEN  (408) ('ConvertAnsiToOem      Procedure(),Virtual')
WHEN  (409) ('AsnDecode {13}Procedure (*Long pPos,*StringTheory rASNValue,<<*String rASNType>),Long,Virtual')
WHEN  (410) ('AsnEncode {13}Procedure (String pType,<<String pValue>),Virtual')
WHEN  (411) ('AsnEncodeNumber       Procedure (String pType,Long pValue),Virtual')
WHEN  (412) ('FormatHTML {12}procedure (),Virtual')
WHEN  (413) ('_IANANameToNumber     Procedure (String pIANAName),Long,Virtual')
WHEN  (414) ('FormatValue {11}Procedure (String pPicture),String,Virtual')
WHEN  (415) ('FormatValue {11}Procedure (String pValue,String pPicture),String,Virtual')
WHEN  (416) ('DeformatValue {9}Procedure (String pPicture),String,Virtual')
WHEN  (417) ('DeformatValue {9}Procedure (String pValue,String pPicture),String,Virtual')
WHEN  (418) ('SetFormatValue        Procedure (String pPicture),Virtual')
WHEN  (419) ('SetFormatValue        Procedure (String pValue,String pPicture),Virtual')
WHEN  (420) ('SetDeformatValue      Procedure (String pPicture),Virtual')
WHEN  (421) ('SetDeformatValue      Procedure (String pValue,String pPicture),Virtual')
WHEN  (2)TIMES 38
WHEN  (1) ('CreatePicture {14}Procedure(<<String pType>,Long pFlag=0),String,Virtual')
WHEN  (2) ('CreateDatePicture {10}Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (3) ('CreateTimePicture {10}Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (4) ('CreateTimeHoursPicture     Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (5) ('CreateStringPicture        Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (6) ('CreateScientificPicture    Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (7) ('CreateNumericPicture       Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (8) ('CreatePatternPicture       Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (9) ('CreateKeyInPicture {9}Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (10) ('CreateUnixTimeStampPicture Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (11) ('CreateHexPicture {11}Procedure(Long pFlag=0),String,Proc,Virtual')
WHEN  (12) ('ParsePicture {15}Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (13) ('ParseDatePicture {11}Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (14) ('ParseTimePicture {11}Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (15) ('ParseTimeHoursPicture      Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (16) ('ParseStringPicture {9}Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (17) ('ParseScientificPicture     Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (18) ('ParseNumericPicture        Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (19) ('ParsePatternPicture        Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (20) ('ParseKeyInPicture {10}Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (21) ('ParseUnixTimeStampPicture  Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (22) ('ParseHexPicture {12}Procedure(<<String pPic>),Long,Proc,Virtual')
WHEN  (23) ('InterpretPicture {11}Procedure(<<String pPic>),String,Proc,Virtual')
WHEN  (24) ('InterpretDatePicture       Procedure(),String,Proc,Virtual')
WHEN  (25) ('InterpretTimePicture       Procedure(),String,Proc,Virtual')
WHEN  (26) ('InterpretTimeHoursPicture  Procedure(),String,Proc,Virtual')
WHEN  (27) ('InterpretStringPicture     Procedure(),String,Proc,Virtual')
WHEN  (28) ('InterpretScientificPicture Procedure(),String,Proc,Virtual')
WHEN  (29) ('InterpretNumericPicture    Procedure(),String,Proc,Virtual')
WHEN  (30) ('InterpretPatternPicture    Procedure(),String,Proc,Virtual')
WHEN  (31) ('InterpretKeyInPicture      Procedure(),String,Proc,Virtual')
WHEN  (32) ('InterpretUnixTimeStampPicture Procedure(),String,Proc,Virtual')
WHEN  (33) ('InterpretHexPicture        Procedure(),String,Proc,Virtual')
WHEN  (34) ('Trace {22}Procedure (string errMsg), virtual')
WHEN  (35) ('_block {21}Procedure(*String pPic, String pAlphabet,*Long pPos,Long pMaxLen),String,Virtual')
WHEN  (36) ('_block {21}Procedure(String pPic, String pAlphabet,*Long pPos,Long pMaxLen),String,Virtual')
WHEN  (37) ('_blockbound {16}Procedure(*String pPic, String pBoundary,*Long pPos),String,Virtual')
WHEN  (38) ('_blockbound {16}Procedure(String pPic, String pBoundary,*Long pPos),String,Virtual')
WHEN  (3)TIMES 6
WHEN  (1) ('Trace {22}Procedure (string errMsg), virtual')
WHEN  (2) ('UnixToClarionDate {10}Procedure (Real pDateTime,Long pMilli=-1),Long,Virtual')
WHEN  (3) ('UnixToClarionTime {10}Procedure (Real pDateTime,Long pMilli=-1),Long,Virtual')
WHEN  (4) ('ClarionToUnixDate {10}Procedure (Long pDate, Long pTime,Long pMilli=false),Real,Virtual')
WHEN  (5) ('UtcDate {20}Procedure(),Long,Virtual')
WHEN  (6) ('UtcTime {20}Procedure(),Long,Virtual')
WHEN  (4)TIMES 11
WHEN  (1) ('FormatValue {16}Procedure (String pValue,<<String pPicture>,Long pFlag=0),String,Virtual')
WHEN  (2) ('FormatDate {17}Procedure (Real pValue,string pPicture,Long pFlag=0),String,Virtual')
WHEN  (3) ('FormatDate {17}Procedure (Real pValue,StringPicture pPic,Long pFlag=0),String,Virtual')
WHEN  (4) ('Week {23}Procedure (Long pValue, *Long pYear, *Long pWeek, *Long pDay),Virtual')
WHEN  (5) ('FormatTime {17}Procedure (Real pValue,string pPicture,Long pFlag=0),String,Virtual')
WHEN  (6) ('FormatTime {17}Procedure (Real pValue,StringPicture pPic,Long pFlag=0),String,Virtual')
WHEN  (7) ('FormatTimeHours {12}Procedure (Real pValue,String pPicture,Long pFlag=0),String,Virtual')
WHEN  (8) ('FormatNumber {15}Procedure (Real pValue,String pPicture,Long pFlag=0),String,Virtual')
WHEN  (9) ('FormatUnixTimeStamp        Procedure (Real pValue,StringPicture pPic,Long pFlag=0),String,Virtual')
WHEN  (10) ('FormatHex {18}Procedure (String pValue,StringPicture pPic,Long pFlag=0),String,Virtual')
WHEN  (11) ('FormatPattern {14}Procedure (String pValue,StringPicture pPic,Long pFlag=0),String,Virtual')
WHEN  (5)TIMES 12
WHEN  (1) ('Translate {18}Procedure (String pText),String,Virtual')
WHEN  (2) ('DateFromWeek {15}Procedure(String pWeek, Long pYear, Long pDay),Long,Virtual')
WHEN  (3) ('DeformatValue {14}Procedure (String pValue,<<String pPicture>),String,Virtual')
WHEN  (4) ('DeformatScientific {9}Procedure (String pValue,<<String pPicture>),String,Virtual')
WHEN  (5) ('DeformatPattern {12}Procedure (String pValue,<<String pPicture>),String,Virtual')
WHEN  (6) ('DeformatHex {16}Procedure (String pValue,<<String pPicture>),String,Virtual')
WHEN  (7) ('DeformatNumber {13}Procedure (String pValue,<<String pPicture>),String,Virtual')
WHEN  (8) ('DeformatTimeHours {10}Procedure (String pValue,<<String pPicture>),Real,Virtual')
WHEN  (9) ('DeformatTime {15}Procedure (String pValue,<<String pPicture>),Real,Virtual')
WHEN  (10) ('DeformatDate {15}Procedure (String pValue,<<String pPicture>),Real,Virtual')
WHEN  (11) ('DeformatDateText {11}Procedure (Long pNumberofParts, String pPart1, String pPart2, String pPart3, String pSep),Real,Virtual')
WHEN  (12) ('DeformatUnixTimeStamp      PROCEDURE (String pValue,<<String pPicture>),Real,Virtual')

%dImplements8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 0

%dImplements8C DEPEND %dImplements8Cx DEFAULT TIMES 0

%dClasses8Bci DEPEND %dClasses8Bx DEFAULT TIMES 5
WHEN  (1) ('StringTheory')
WHEN  (2) ('StringPicture')
WHEN  (3) ('UnixDate')
WHEN  (4) ('StringFormat')
WHEN  (5) ('StringDeformat')

%dInterfaces8Bx MULTI LONG  ()
%dInterfaces8B DEPEND %dInterfaces8Bx DEFAULT TIMES 0

%dInterfaceINCFile DEPEND %dInterfaces8Bx DEFAULT TIMES 0

%dMethods8Dx DEPEND %dInterfaces8Bx MULTI LONG TIMES 0

%dMethods8D DEPEND %dMethods8Dx DEFAULT TIMES 0

%dAdditionalINCFiles MULTI LONG  ()
%dAdditionalINCFile DEPEND %dAdditionalINCFiles DEFAULT TIMES 0

%dClassVersion DEFAULT  ('81595')
[ADDITION]
NAME Reflection Activate_Reflection
[INSTANCE]
INSTANCE 2
[PROMPTS]
%NoGloReflection LONG  (0)
%FixCreateISAM LONG  (0)
%FixCreateSQL LONG  (0)
%MultiDLL LONG  (0)
%RootDLL LONG  (0)
%dClasses8Bx MULTI LONG  (1)
%dClasses8B DEPEND %dClasses8Bx DEFAULT TIMES 1
WHEN  (1) ('REFLECTCLASS')

%dBaseClass DEPEND %dClasses8Bx DEFAULT TIMES 1
WHEN  (1) ('')

%dClassINCFile DEPEND %dClasses8Bx DEFAULT TIMES 1
WHEN  (1) ('REFLECTION.INC')

%dMethods8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 1
WHEN  (1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)

%dMethods8C DEPEND %dMethods8Cx DEFAULT TIMES 1
WHEN  (1)TIMES 100
WHEN  (1) ('Construct {23}Procedure')
WHEN  (2) ('Destruct {24}Procedure,Virtual')
WHEN  (3) ('Start {27}Procedure(),Virtual')
WHEN  (4) ('With {28}Procedure(*Cstring pGroupName),Long,Proc,Virtual')
WHEN  (5) ('With {28}Procedure(*Cstring pGroupName,*Cstring pColumnName),Long,Proc,Virtual')
WHEN  (6) ('With {28}Procedure(*Cstring pGroupName,*Cstring pColumnName, Long pCreate),Long,Proc,Virtual')
WHEN  (7) ('Walk {28}Procedure(),Virtual')
WHEN  (8) ('Walk {28}Procedure(StringTheory pStr),Virtual')
WHEN  (9) ('Trace {27}Procedure(String pStr),Virtual')
WHEN  (10) ('InterpretFieldType {14}Procedure(Long pType),String,Virtual')
WHEN  (11) ('Parse {27}Procedure(*Group pGroup),Virtual')
WHEN  (12) ('Parse {27}Procedure(*Queue pQueue),Virtual')
WHEN  (13) ('Parse {27}Procedure(*File pTable),Virtual')
WHEN  (14) ('Parse {27}Procedure(*View pView),Virtual')
WHEN  (15) ('Parse {27}Procedure(String pGroupName,*Group pGroup),Virtual')
WHEN  (16) ('Parse {27}Procedure(String pGroupName,*Queue pQueue),Virtual')
WHEN  (17) ('Parse {27}Procedure(String pGroupName,*File pTable),Virtual')
WHEN  (18) ('Parse {27}Procedure(String pGroupName,*View pView),Virtual')
WHEN  (19) ('Parse {27}Procedure(*Cstring pGroupName,*Group pGroup),Virtual')
WHEN  (20) ('Parse {27}Procedure(*Cstring pGroupName,*Queue pQueue),Virtual')
WHEN  (21) ('Parse {27}Procedure(*Cstring pGroupName,*File pTable),Virtual')
WHEN  (22) ('Parse {27}Procedure(*Cstring pGroupName,*View pView),Virtual')
WHEN  (23) ('ParseField {22}Procedure(*Cstring pGroupName,StringTheory pExternalName),String,Proc,Virtual')
WHEN  (24) ('_ParseField {21}Procedure(*Cstring pGroupName,StringTheory pExternalName,Long pColumnNumber,*Group pGroup),Long,Proc,Virtual')
WHEN  (25) ('_ParseAttributes {16}Procedure(*Cstring pGroupName,*Cstring pColumnName),Long,Proc,Virtual')
WHEN  (26) ('SetAttributes {19}Procedure(string pGroupName,string pColumnName, String pExternalName),Virtual')
WHEN  (27) ('SetAttributes {19}Procedure(*Cstring pGroupName,*Cstring pColumnName, StringTheory pExternalName),Virtual')
WHEN  (28) ('SetAttribute {20}Procedure(String pGroupName,String pColumnName, String pAttribute),Virtual')
WHEN  (29) ('SetAttribute {20}Procedure(*Cstring pGroupName,*Cstring pColumnName, String pAttribute),Virtual')
WHEN  (30) ('GetAttributeValue {15}Procedure(*Cstring pGroupName,*Cstring pColumnName, String pAttribute),String,Virtual')
WHEN  (31) ('GetAttributeExists {14}Procedure(*Cstring pGroupName,*Cstring pColumnName, String pAttribute),Long,Virtual')
WHEN  (32) ('GetAttributeExists {14}Procedure(String pAttribute),Long,Virtual')
WHEN  (33) ('DeleteAttribute {17}Procedure(*Cstring pGroupName,*Cstring pColumnName, String pAttribute),Virtual')
WHEN  (34) ('ClearAttribute {18}Procedure(*Cstring pGroupName, String pAttribute),Virtual ')
WHEN  (35) ('SetPicture {22}Procedure(string pGroupName,string pColumnName, String pPicture),Virtual')
WHEN  (36) ('SetPicture {22}Procedure(*Cstring pGroupName,*Cstring pColumnName, String pPicture),Virtual')
WHEN  (37) ('SetType {25}Procedure(string pGroupName,string pColumnName, Long pFieldType),Virtual')
WHEN  (38) ('SetType {25}Procedure(*Cstring pGroupName,*Cstring pColumnName, Long pFieldType),Virtual')
WHEN  (39) ('SetNumber {23}Procedure(*Cstring pGroupName,*Cstring pColumnName, Long pColumnNumber),Virtual')
WHEN  (40) ('SetRename {23}Procedure(*Cstring pGroupName,*Cstring pColumnName, String pRename),Virtual')
WHEN  (41) ('SetReference {20}Procedure(*Cstring pGroupName,*Cstring pColumnName, *Group pGroup),Virtual')
WHEN  (42) ('SetDescription {18}Procedure(string pGroupName,string pColumnName, String pDescription),Virtual')
WHEN  (43) ('SetDescription {18}Procedure(*Cstring pGroupName,*Cstring pColumnName, StringTheory pDescription),Virtual')
WHEN  (44) ('SetSize {25}Procedure(*Cstring pGroupName,*Cstring pColumnName, Long pSize),Virtual')
WHEN  (45) ('GetColumnName {19}Procedure(*Group pGroup,Long pIndex),String,Virtual')
WHEN  (46) ('GetColumnName {19}Procedure(*Queue pQueue,Long pIndex),String,Virtual')
WHEN  (47) ('GetColumnName {19}Procedure(*File pTable,Long pIndex),String,Virtual')
WHEN  (48) ('GetColumnName {19}Procedure(*Cstring pGroupName,*Cstring pTagName),String,VIRTUAL')
WHEN  (49) ('GetRename {23}Procedure(*Cstring pGroupName,*Cstring pColumnName),String,VIRTUAL')
WHEN  (50) ('GetPicture {22}Procedure(*Cstring pGroupName,*Cstring pColumnName),String,VIRTUAL')
WHEN  (51) ('GetType {25}Procedure(*Cstring pGroupName,*Cstring pColumnName),Long,VIRTUAL')
WHEN  (52) ('GetNumber {23}Procedure(*Cstring pGroupName,*Cstring pColumnName),Long,Proc,Virtual')
WHEN  (53) ('GetDescription {18}Procedure(*Cstring pGroupName,*Cstring pColumnName),String,Proc,Virtual')
WHEN  (54) ('GetSize {25}Procedure(*Cstring pGroupName,*Cstring pColumnName),Long,Proc,Virtual')
WHEN  (55) ('AdjustColumnName {16}Procedure(String pColumnName, Long pTagCase),String,Virtual')
WHEN  (56) ('AdjustColumnName {16}Procedure(StringTheory pColumnName, Long pTagCase),Virtual')
WHEN  (57) ('CountFieldsInGroup {14}Procedure(*Group pGroup),Long,Virtual')
WHEN  (58) ('ClearGroup {22}Procedure(*Group pGroup),Virtual')
WHEN  (59) ('ClearGroup {22}Procedure(*Cstring pGroupName, *Group pGroup),Virtual')
WHEN  (60) ('ClearQueue {22}Procedure(*Queue pQueue),Virtual')
WHEN  (61) ('ClearQueue {22}Procedure(*Cstring pGroupName, *Queue pQueue),Virtual')
WHEN  (62) ('ClearTable {22}Procedure(*Cstring pGroupName, *FILE pTable),Virtual')
WHEN  (63) ('DisposeGroup {20}Procedure(*Group pGroup),Virtual')
WHEN  (64) ('DisposeGroup {20}Procedure(*Group pGroup,Long pDispose),Virtual')
WHEN  (65) ('DisposeQueue {20}Procedure(*Queue pQueue),Virtual')
WHEN  (66) ('DisposeQueue {20}Procedure(*Queue pQueue,Long pDispose),Virtual')
WHEN  (67) ('GetFieldValue {19}Procedure(*Group pGroup, String pFieldName),String,Virtual')
WHEN  (68) ('GetField {24}Procedure(*Group pGroup, String pFieldname),*?,Virtual')
WHEN  (69) ('GetFieldNumber {18}Procedure(*Group pGroup, String pFieldName),Long,Virtual')
WHEN  (70) ('GetFieldName {20}Procedure(*Group pGroup, Long pFieldNumber),String,Virtual')
WHEN  (71) ('GetFieldName {20}Procedure(*Group pGroup, Long pFieldNumber, Long pCase),String,Virtual')
WHEN  (72) ('CleanFieldName {18}Procedure(*StringTheory pFieldName),Virtual')
WHEN  (73) ('AssignStringPtr {17}Procedure(*? pField,String pValue),Virtual')
WHEN  (74) ('AssignStringPtr {17}Procedure(*? pField,StringTheory pValue),Virtual')
WHEN  (75) ('AssignCStringPtr {16}Procedure(*? pField,String pValue),Virtual')
WHEN  (76) ('AssignCStringPtr {16}Procedure(*? pField,StringTheory pValue),Virtual')
WHEN  (77) ('AssignPStringPtr {16}Procedure(*? pField,String pValue),Virtual')
WHEN  (78) ('AssignPStringPtr {16}Procedure(*? pField,StringTheory pValue),Virtual')
WHEN  (79) ('AssignStringTheoryPtr {11}Procedure(*? pField,String pValue),Virtual')
WHEN  (80) ('AssignStringTheoryPtr {11}Procedure(*? pField,StringTheory pValue),Virtual')
WHEN  (81) ('ReadStringPtr {19}Procedure(*? pField),String,Virtual')
WHEN  (82) ('ReadStringPtrLength {13}Procedure(*? pField),Long,Virtual')
WHEN  (83) ('ReadCStringPtr {18}Procedure(*? pField),String,Virtual')
WHEN  (84) ('ReadCStringPtrLength {12}Procedure(*? pField),Long,Virtual')
WHEN  (85) ('ReadPStringPtr {18}Procedure(*? pField),String,Virtual')
WHEN  (86) ('ReadPStringPtrLength {12}Procedure(*? pField),Long,Virtual')
WHEN  (87) ('ReadStringTheoryPtr {13}Procedure(*? pField),String,Virtual')
WHEN  (88) ('ReadStringTheoryPtrLength       Procedure(*? pField),Long,Virtual')
WHEN  (89) ('GetAnyType {22}Procedure(*? pField),Long,Virtual')
WHEN  (90) ('GetAnySize {22}Procedure(*? pField),Long,Virtual')
WHEN  (91) ('FixCreate {23}Procedure(*File pTable),Virtual')
WHEN  (92) ('TableFieldToColumn {14}Procedure(FILE pTable,String pLabel),String,Virtual')
WHEN  (93) ('SetTagCase {22}Procedure(Byte pCase),Virtual')
WHEN  (94) ('GetTagCase {22}Procedure(),Byte,Virtual')
WHEN  (95) ('SetRemovePrefix {17}Procedure(Byte pState),Virtual')
WHEN  (96) ('SetMaxPrefixLength {14}Procedure(Long pState),Virtual')
WHEN  (97) ('SetPrefixChars {18}Procedure(String pState),Virtual')
WHEN  (98) ('SetReplaceChars {17}Procedure(Byte pState),Virtual')
WHEN  (99) ('SetReplacementChars {13}Procedure(String pState),Virtual')
WHEN  (100) ('SetPrefix {23}Procedure(String pState),Virtual')

%dImplements8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 0

%dImplements8C DEPEND %dImplements8Cx DEFAULT TIMES 0

%dClasses8Bci DEPEND %dClasses8Bx DEFAULT TIMES 1
WHEN  (1) ('ReflectClass')

%dInterfaces8Bx MULTI LONG  (1)
%dInterfaces8B DEPEND %dInterfaces8Bx DEFAULT TIMES 1
WHEN  (1) ('RF:IUFO')

%dInterfaceINCFile DEPEND %dInterfaces8Bx DEFAULT TIMES 1
WHEN  (1) ('REFLECTION.INC')

%dMethods8Dx DEPEND %dInterfaces8Bx MULTI LONG TIMES 1
WHEN  (1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38)

%dMethods8D DEPEND %dMethods8Dx DEFAULT TIMES 1
WHEN  (1)TIMES 38
WHEN  (1) ('_Type {18}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (2) ('ToMem {18}PROCEDURE {27}')
WHEN  (3) ('FromMem {16}PROCEDURE {27}')
WHEN  (4) ('OldFromMem {13}PROCEDURE {27}')
WHEN  (5) ('Pop {20}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (6) ('Push {19}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (7) ('DPop {19}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (8) ('DPush {18}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (9) ('_Real {18}PROCEDURE(LONG _UfoAddr),REAL       ')
WHEN  (10) ('_Long {18}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (11) ('_Free {18}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (12) ('_Clear {17}PROCEDURE {27}')
WHEN  (13) ('_Address {15}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (14) ('AssignLong {13}PROCEDURE {27}')
WHEN  (15) ('AssignReal {13}PROCEDURE {27}')
WHEN  (16) ('AssignUFO {14}PROCEDURE {27}')
WHEN  (17) ('AClone {17}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (18) ('Select {17}PROCEDURE {27}')
WHEN  (19) ('Slice {18}PROCEDURE {27}')
WHEN  (20) ('Designate {14}PROCEDURE {27}')
WHEN  (21) ('_Max {19}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (22) ('_Size {18}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (23) ('BaseType {15}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (24) ('DistinctUpper {10}PROCEDURE {27}')
WHEN  (25) ('DistinctsUFO {11}PROCEDURE {27}')
WHEN  (26) ('DistinctsLong {10}PROCEDURE {27}')
WHEN  (27) ('Cleared {16}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (28) ('IsNull {17}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (29) ('OEM2ANSI {15}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (30) ('ANSI2OEM {15}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (31) ('_Bind {18}PROCEDURE(LONG _UfoAddr) {12}')
WHEN  (32) ('_Add {19}PROCEDURE {27}')
WHEN  (33) ('Divide {17}PROCEDURE {27}')
WHEN  (34) ('Hash {19}PROCEDURE(LONG _UfoAddr),LONG       ')
WHEN  (35) ('SetAddress {13}PROCEDURE {27}')
WHEN  (36) ('Match {18}PROCEDURE {27}')
WHEN  (37) ('Identical {14}PROCEDURE {27}')
WHEN  (38) ('Store {18}PROCEDURE {27}')

%dAdditionalINCFiles MULTI LONG  ()
%dAdditionalINCFile DEPEND %dAdditionalINCFiles DEFAULT TIMES 0

%dClassVersion DEFAULT  ('81595')
[ADDITION]
NAME xFiles ActivatexFiles
[INSTANCE]
INSTANCE 3
[PROMPTS]
%NoGloxFiles LONG  (0)
%XFGloRemovePrefix LONG  (1)
%XFGloReplaceColons LONG  (1)
%XFGloEncoding DEFAULT  ('Don''t Set')
%XFGloLoggingOn DEFAULT  ('100')
%XFGloHeader DEFAULT  ('')
%XFGloFooter DEFAULT  ('')
%XFGloDoMemos LONG  (0)
%XFGloDoBlobs LONG  (0)
%XFGloStringsCDATA LONG  (0)
%XFGloMemosCDATA LONG  (1)
%XFGloBlobsCDATA LONG  (1)
%XFGloFreeQueuesBeforeLoading LONG  (1)
%XFGloFreeGroupsBeforeLoading LONG  (0)
%XFGloFreeFilesBeforeLoading LONG  (0)
%xFGloUpdateFileOnLoad LONG  (0)
%MultiDLL LONG  (0)
%RootDLL LONG  (0)
%dClasses8Bx MULTI LONG  (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, |
  17, 18, 19, 20, 21, 22, 23)
%dClasses8B DEPEND %dClasses8Bx DEFAULT TIMES 23
WHEN  (1) ('XFILEBASE')
WHEN  (2) ('XFILELINKDLL')
WHEN  (3) ('XFILEBINARY')
WHEN  (4) ('XFILESSTREAM')
WHEN  (5) ('XFILEXML')
WHEN  (6) ('XFILESETTINGS')
WHEN  (7) ('XFILEFASTTIMER')
WHEN  (8) ('XFILEEXPLODE')
WHEN  (9) ('XFILEBASECOMPRESS')
WHEN  (10) ('XCELL')
WHEN  (11) ('XCELLWORKBOOK')
WHEN  (12) ('XCELLSTYLES')
WHEN  (13) ('XCELLBORDERS')
WHEN  (14) ('XCELLWORKSHEETS')
WHEN  (15) ('XCELLCOLUMNS')
WHEN  (16) ('XCELLROWS')
WHEN  (17) ('XCELLCELLS')
WHEN  (18) ('XFILESPROPERTYCLASS')
WHEN  (19) ('XMLTREE')
WHEN  (20) ('XFILESTREE')
WHEN  (21) ('XFILESXSDCLASS')
WHEN  (22) ('XFILESSCHEMACLASS')
WHEN  (23) ('XMLCLARIONCLASS')

%dBaseClass DEPEND %dClasses8Bx DEFAULT TIMES 22
WHEN  (1) ('')
WHEN  (2) ('xFileBase')
WHEN  (3) ('xFileBase')
WHEN  (4) ('xFileBinary')
WHEN  (5) ('xFilesStream')
WHEN  (6) ('xFilesStream')
WHEN  (7) ('xFileBase')
WHEN  (8) ('xFileBase')
WHEN  (9) ('xFileBinary')
WHEN  (10) ('xFileBase')
WHEN  (11) ('xFilesStream')
WHEN  (12) ('xFilesStream')
WHEN  (13) ('xFilesStream')
WHEN  (14) ('xFilesStream')
WHEN  (15) ('xFilesStream')
WHEN  (16) ('xFilesStream')
WHEN  (17) ('xFilesStream')
WHEN  (18) ('')
WHEN  (19) ('')
WHEN  (20) ('XmlTree')
WHEN  (21) ('xFilesTree')
WHEN  (22) ('xFilesTree')

%dClassINCFile DEPEND %dClasses8Bx DEFAULT TIMES 23
WHEN  (1) ('XFILES.INC')
WHEN  (2) ('XFILES.INC')
WHEN  (3) ('XFILES.INC')
WHEN  (4) ('XFILES.INC')
WHEN  (5) ('XFILES.INC')
WHEN  (6) ('XFILES.INC')
WHEN  (7) ('XFILES.INC')
WHEN  (8) ('XFILES.INC')
WHEN  (9) ('XFILES.INC')
WHEN  (10) ('XFILES.INC')
WHEN  (11) ('XFILES.INC')
WHEN  (12) ('XFILES.INC')
WHEN  (13) ('XFILES.INC')
WHEN  (14) ('XFILES.INC')
WHEN  (15) ('XFILES.INC')
WHEN  (16) ('XFILES.INC')
WHEN  (17) ('XFILES.INC')
WHEN  (18) ('XFILES.INC')
WHEN  (19) ('XFILES.INC')
WHEN  (20) ('XFILES.INC')
WHEN  (21) ('XFILES.INC')
WHEN  (22) ('XFILES.INC')
WHEN  (23) ('XFILES.INC')

%dMethods8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 22
WHEN  (1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
WHEN  (2) (1, 2, 3, 4)
WHEN  (3) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
WHEN  (4) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, |
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, |
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, |
  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, |
  149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, |
  165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, |
  181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, |
  197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210)
WHEN  (5) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
WHEN  (6) (1, 2, 3, 4, 5, 6)
WHEN  (7) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
WHEN  (8) (1, 2, 3, 4, 5, 6)
WHEN  (10) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57)
WHEN  (11) (1, 2, 3)
WHEN  (12) (1, 2, 3, 4, 5)
WHEN  (13) (1)
WHEN  (14) (1, 2, 3, 4)
WHEN  (15) (1)
WHEN  (16) (1, 2, 3, 4)
WHEN  (17) (1)
WHEN  (18) (1, 2, 3)
WHEN  (19) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, |
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, |
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127)
WHEN  (20) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, |
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, |
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, |
  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146)
WHEN  (21) (1, 2, 3, 4, 5)
WHEN  (22) (1, 2, 3, 4, 5, 6, 7)
WHEN  (23) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)

%dMethods8C DEPEND %dMethods8Cx DEFAULT TIMES 22
WHEN  (1)TIMES 18
WHEN  (1) ('Construct {14}Procedure')
WHEN  (2) ('Destruct {15}Procedure () ,VIRTUAL')
WHEN  (3) ('Start {18}Procedure (),Virtual')
WHEN  (4) ('Log {20}Procedure (string p_Function, string p_Message,long pForce=0) ,VIRTUAL')
WHEN  (5) ('ErrorTrap {14}Procedure (STRING pStr),Virtual')
WHEN  (6) ('Trace {18}Procedure (string p_Message) ,VIRTUAL')
WHEN  (7) ('SetCodePage {12}Procedure (<<Long pCharSet>,Long pCodePage=-1),VIRTUAL')
WHEN  (8) ('GetCodePage {12}Procedure (),Long,VIRTUAL')
WHEN  (9) ('SetSaveEncoding        Procedure(String pState),Virtual')
WHEN  (10) ('GetSaveEncoding        Procedure(),String,Virtual')
WHEN  (11) ('SetLoadEncoding        Procedure(String pState),Virtual')
WHEN  (12) ('GetLoadEncoding        Procedure(),String,Virtual')
WHEN  (13) ('SetDontUTFEncode       Procedure(Byte pState),Virtual')
WHEN  (14) ('GetDontUTFEncode       Procedure(),Byte,Virtual')
WHEN  (15) ('SetDontUTFDecode       Procedure(Byte pState),Virtual')
WHEN  (16) ('GetDontUTFDecode       Procedure(),Byte,Virtual')
WHEN  (17) ('XMLtoHTML {14}Procedure(StringTheory p_xml),STRING,VIRTUAL')
WHEN  (18) ('XMLtoHTML {14}Procedure(String p_xml),STRING,VIRTUAL')
WHEN  (2)TIMES 4
WHEN  (1) ('LinkDLLFunction        PROCEDURE (string p_DLLName,string p_FunctionName,*long p_fpFunction),long ,VIRTUAL')
WHEN  (2) ('Construct {14}PROCEDURE')
WHEN  (3) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (4) ('Init {19}PROCEDURE () ,VIRTUAL')
WHEN  (3)TIMES 16
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('Init {19}PROCEDURE (string p_FileName) ,VIRTUAL')
WHEN  (4) ('Load {19}PROCEDURE (), long, proc, virtual')
WHEN  (5) ('Load {19}PROCEDURE (string p_FileName),long,proc ,VIRTUAL')
WHEN  (6) ('Save {19}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (7) ('Save {19}PROCEDURE (string p_FileName),long,proc ,VIRTUAL')
WHEN  (8) ('SearchAndReplace       PROCEDURE (string p_Find, string p_Replace),long,proc ,VIRTUAL')
WHEN  (9) ('CleanFileName {10}PROCEDURE (string p_Filename,Long p_flag=0),string ,VIRTUAL')
WHEN  (10) ('_Free {18}PROCEDURE () ,VIRTUAL')
WHEN  (11) ('_Close {17}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (12) ('_ZipInit {15}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (13) ('_ZipBinDataToZip       PROCEDURE (long p_DontCloseNow=0, <<string pXMLFileName>),long,proc ,VIRTUAL')
WHEN  (14) ('_UnZipToBinData        PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (15) ('_ZipBinDataCRC {9}PROCEDURE (),long ,VIRTUAL')
WHEN  (16) ('SaveBinButDontClose    PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (4)TIMES 210
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Constructor {12}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (4) ('Init {19}PROCEDURE (*Group p_Group, string p_FileName), virtual')
WHEN  (5) ('Init {19}PROCEDURE (*Queue p_Queue, string p_FileName), virtual')
WHEN  (6) ('Init {19}PROCEDURE (*Queue p_Queue, string p_FileName, *Queue p_TempQueue), virtual')
WHEN  (7) ('Start {18}PROCEDURE (),Virtual')
WHEN  (8) ('DisposeGroup {11}Procedure(*Group pGroup,Long pDispose=false),Virtual')
WHEN  (9) ('DisposeQueue {11}Procedure(*Queue pQueue,Long pDispose=false),Virtual')
WHEN  (10) ('ParseXmlHeader {9}Procedure(String pHeader)')
WHEN  (11) ('CalcProgress {11}PROCEDURE (),Virtual')
WHEN  (12) ('CalcProgress {11}PROCEDURE (Long pProgress),Virtual')
WHEN  (13) ('Load {19}PROCEDURE (), long, proc, virtual')
WHEN  (14) ('Load {19}PROCEDURE (*Group p_Group, string p_FileName), long, proc, virtual')
WHEN  (15) ('Load {19}PROCEDURE (*Group p_Group, string p_FileName,string p_FileBoundary), long, proc, virtual')
WHEN  (16) ('Load {19}PROCEDURE (*Group p_Group, string p_FileName,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (17) ('Load {19}PROCEDURE (*Group p_Group, *string p_String, long p_Length), long, proc, virtual')
WHEN  (18) ('Load {19}PROCEDURE (*Group p_Group, *string p_String, long p_Length,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (19) ('Load {19}PROCEDURE (*Group p_Group, StringTheory p_String), long, proc, virtual')
WHEN  (20) ('Load {19}PROCEDURE (*Group p_Group, StringTheory p_String, string p_FileBoundary), long, proc, virtual')
WHEN  (21) ('Load {19}PROCEDURE (*Group p_Group, StringTheory p_String, string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (22) ('Load {19}PROCEDURE (*Queue p_Queue, string p_FileName), long, proc ,VIRTUAL')
WHEN  (23) ('Load {19}PROCEDURE (*Queue p_Queue, string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (24) ('Load {19}PROCEDURE (*Queue p_Queue, *string p_String, long p_Length), long, proc, virtual  ')
WHEN  (25) ('Load {19}PROCEDURE (*Queue p_Queue, *string p_String, long p_Length,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual  ')
WHEN  (26) ('Load {19}PROCEDURE (*Queue p_Queue, StringTheory p_String), long, proc, virtual')
WHEN  (27) ('Load {19}PROCEDURE (*Queue p_Queue, StringTheory p_String, string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (28) ('Load {19}PROCEDURE (*File p_File, string p_FileName), long, proc, virtual')
WHEN  (29) ('Load {19}PROCEDURE (*File p_File, string p_FileName,string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (30) ('Load {19}PROCEDURE (*File p_File, *string p_String, long p_Length), long, proc, virtual')
WHEN  (31) ('Load {19}PROCEDURE (*File p_File, *string p_String, long p_Length, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (32) ('load {19}PROCEDURE (*xFilesStream pXML,*Group p_Group, *string p_String,string p_FileBoundary,string p_RecordBoundary),long, proc, virtual')
WHEN  (33) ('load {19}PROCEDURE (*xFilesStream pXML,*Queue p_Queue, *string p_String,string p_FileBoundary,string p_RecordBoundary),long, proc, virtual')
WHEN  (34) ('load {19}PROCEDURE (*xFilesStream pXML,*File p_File, *string p_String,string p_FileBoundary,string p_RecordBoundary),long, proc, virtual')
WHEN  (35) ('Save {19}PROCEDURE (),long,proc ,virtual')
WHEN  (36) ('Save {19}PROCEDURE (*Group p_Group),long,proc ,VIRTUAL')
WHEN  (37) ('Save {19}PROCEDURE (*Group p_Group,string p_FileName),long,proc ,virtual')
WHEN  (38) ('Save {19}PROCEDURE (*Group p_Group,string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (39) ('Save {19}PROCEDURE (*Group p_Group,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (40) ('Save {19}PROCEDURE (*Group p_Group,StringTheory p_Str),long,proc ,virtual')
WHEN  (41) ('Save {19}PROCEDURE (*Group p_Group,StringTheory p_Str,string p_RecordBoundary),long,proc ,virtual')
WHEN  (42) ('Save {19}PROCEDURE (*Group p_Group,StringTheory p_Str,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (43) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileName),long,proc ,virtual')
WHEN  (44) ('Save {19}PROCEDURE (*Queue p_Queue),long,proc ,VIRTUAL')
WHEN  (45) ('Save {19}PROCEDURE (*Queue p_Queue,StringTheory p_Str),long,proc ,VIRTUAL')
WHEN  (46) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (47) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (48) ('Save {19}PROCEDURE (*Queue p_Queue,StringTheory p_Str,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (49) ('Save {19}PROCEDURE (*View p_View,string p_FileName),long,proc ,virtual')
WHEN  (50) ('Save {19}PROCEDURE (*View p_View), long, proc, VIRTUAL')
WHEN  (51) ('Save {19}PROCEDURE (*View p_View,StringTheory p_Str), long, proc, VIRTUAL')
WHEN  (52) ('Save {19}PROCEDURE (*View p_View, string p_FileName, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (53) ('Save {19}PROCEDURE (*View p_View, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (54) ('Save {19}PROCEDURE (*View p_View, StringTheory p_Str, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (55) ('Save {19}PROCEDURE (*File p_File, string p_FileName, <<*Key p_key>), long,proc ,virtual')
WHEN  (56) ('Save {19}PROCEDURE (*File p_File, string p_FileName,string p_FileBoundary,string p_RecordBoundary, <<*Key p_key>), long, proc, virtual')
WHEN  (57) ('Save {19}PROCEDURE (*File p_File, <<*Key p_key>), long, proc, VIRTUAL')
WHEN  (58) ('Save {19}PROCEDURE (*File p_File, StringTheory p_Str, <<*Key p_key>), long, proc, VIRTUAL')
WHEN  (59) ('Save {19}PROCEDURE (*File p_File, string p_FileBoundary, string p_RecordBoundary, <<*Key p_key>),long, proc, virtual')
WHEN  (60) ('Save {19}PROCEDURE (*File p_File, StringTheory p_Str, string p_FileBoundary, string p_RecordBoundary, <<*Key p_key>),long, proc, virtual')
WHEN  (61) ('Save {19}PROCEDURE (*Queue p_Queue,xFilesStream pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (62) ('Save {19}PROCEDURE (*View p_View,xFilesStream pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (63) ('Save {19}PROCEDURE (*File p_File,xFilesStream pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (64) ('Save {19}PROCEDURE (*Group p_Group,xFilesStream pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (65) ('SaveOneField {11}Procedure (Long p_field,Long pState),Long,Proc,Virtual')
WHEN  (66) ('AddAtListStart {9}Procedure(),Virtual')
WHEN  (67) ('AddAtRecordStart       Procedure(),Virtual')
WHEN  (68) ('AddAtRecordEnd {9}Procedure(),Virtual')
WHEN  (69) ('AddAtListEnd {11}Procedure(),Virtual')
WHEN  (70) ('AddText {16}PROCEDURE(String p_text),Virtual')
WHEN  (71) ('GetFieldName {11}Procedure(*Group p_Group,Long p_Index),String,Virtual')
WHEN  (72) ('GetFieldName {11}Procedure(*Queue p_Queue,Long p_Index),String,Virtual')
WHEN  (73) ('GetFieldName {11}Procedure(*File  p_File,Long p_Index),String,Virtual')
WHEN  (74) ('GetFieldNumber {9}Procedure(*Group pGroup, String pName, Long pCase=XF:CaseAny),Long,Proc,Virtual')
WHEN  (75) ('DisableField {11}Procedure(*Group pGroup, String pName, Long pCase=XF:CaseAny),Long,Proc,Virtual')
WHEN  (76) ('DisableField {11}Procedure(*FILE pTable, String pName, Long pCase=XF:CaseAny),Long,Proc,Virtual')
WHEN  (77) ('DisableField {11}Procedure(*QUEUE pQueue, String pName, Long pCase=XF:CaseAny),Long,Proc,Virtual')
WHEN  (78) ('DisableField {11}Procedure(*VIEW pView, String pName, Long pCase=XF:CaseAny),Long,Proc,Virtual')
WHEN  (79) ('Copy {19}Procedure (*Queue Q, *Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (80) ('Copy {19}Procedure (*File F, *Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (81) ('Copy {19}Procedure (*Group G, *Group p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (82) ('_Copy {18}Procedure (*Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (83) ('_Copy {18}Procedure (*Group p_Group, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (84) ('GetValue {15}PROCEDURE (string p_Field, long p_dim = 0),any ,VIRTUAL')
WHEN  (85) ('SetValue {15}PROCEDURE (string p_Field, string p_Value, long p_dim = 0),long,proc ,VIRTUAL')
WHEN  (86) ('AddRecord {14}PROCEDURE (<<any p_F1>,<<any p_F2>,<<any p_F3>,<<any p_F4>,<<any p_F5>,<<any p_F6>,<<any p_F7>,<<any p_F8>,<<any p_F9>,<<any p_F10>,<<any p_F11>,<<any p_F12>,<<any p_F13>,<<any p_F14>,<<any p_F15>,<<any p_F16>,<<any p_F17>,<<any p_F18>,<<any p_F19>,<<any p_F20>),long,proc ,VIRTUAL')
WHEN  (87) ('FastDelete {13}PROCEDURE (long p_KeepStart, long p_KeepEnd),long,proc ,VIRTUAL')
WHEN  (88) ('RecordCount {12}PROCEDURE (),long ,VIRTUAL')
WHEN  (89) ('RemoveDuplicatesAfterSort PROCEDURE (long p_FieldCount),long,proc ,VIRTUAL')
WHEN  (90) ('MakeAttributesForRecord  Procedure (Long NumberOfAttributeFields),Long,VIRTUAL')
WHEN  (91) ('SaveCurrentFieldToXML  PROCEDURE (Long p_x,Long p_DimCounter),VIRTUAL')
WHEN  (92) ('SaveCurrentFieldToXML  PROCEDURE (Long p_x,Long p_DimCounter,String p_name),VIRTUAL')
WHEN  (93) ('FormatCurrentField     PROCEDURE (String p_format),VIRTUAL')
WHEN  (94) ('DecGroups {14}Procedure (long p_DimCounter),VIRTUAL')
WHEN  (95) ('DecGroup {15}Procedure (Long p_cs,long p_DimCounter),VIRTUAL')
WHEN  (96) ('StartRecord {12}PROCEDURE (Long RecordBoundaryLen,Long RecordBoundaryLenAttr),VIRTUAL')
WHEN  (97) ('EndRecord {14}PROCEDURE (Long p_Len),VIRTUAL')
WHEN  (98) ('AddString {14}Procedure (String pString)')
WHEN  (99) ('ExtractNamesForLoad    PROCEDURE (),VIRTUAL')
WHEN  (100) ('ExtractNamesForSave    PROCEDURE (),VIRTUAL')
WHEN  (101) ('SetGroupLengths        Procedure (),VIRTUAL')
WHEN  (102) ('ExtractValue {11}PROCEDURE (String p_attr,String p_text),String ,VIRTUAL')
WHEN  (103) ('CheckSize {14}PROCEDURE (Long p_requiredSize),Virtual')
WHEN  (104) ('_PrepareCurrentField   PROCEDURE (Long p_x) ,VIRTUAL')
WHEN  (105) ('_WriteCurrentField     PROCEDURE (Long p_x) ,VIRTUAL')
WHEN  (106) ('_WriteStartTag {9}PROCEDURE (String p_TagName) ,VIRTUAL')
WHEN  (107) ('_WriteStartTag {9}PROCEDURE (Long p_x,Long p_DimCounter,Long p_CRLF=0,Long p_Close=0) ,VIRTUAL')
WHEN  (108) ('_WriteEndTag {11}PROCEDURE (String p_TagName),VIRTUAL')
WHEN  (109) ('_WriteEndTag {11}PROCEDURE (Long p_x,Long p_DimCounter,Long p_Indent=0) ,VIRTUAL')
WHEN  (110) ('_WriteAttribute        PROCEDURE (Long p_x),VIRTUAL')
WHEN  (111) ('_AddAttribute {10}Procedure (Long p_x, *String p_string,*Long p_Len, Long p_NewLength, Long p_cs), Virtual')
WHEN  (112) ('_CountFieldsInGroup    PROCEDURE (*Group p_g),Long ,VIRTUAL')
WHEN  (113) ('_CountFields {11}PROCEDURE () ,VIRTUAL')
WHEN  (114) ('_Check {17}PROCEDURE () ,VIRTUAL')
WHEN  (115) ('_ReplaceColonsInString PROCEDURE (*string inData) ,VIRTUAL')
WHEN  (116) ('SaveBinButDontClose    PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (117) ('RemoveComments {9}PROCEDURE (),VIRTUAL')
WHEN  (118) ('_RemovePiped {11}PROCEDURE (*String p_name),VIRTUAL')
WHEN  (119) ('_RemovePiped {11}PROCEDURE (*pString p_name),VIRTUAL')
WHEN  (120) ('_RemovePrefix {10}PROCEDURE (*String p_name),VIRTUAL')
WHEN  (121) ('_RemovePrefix {10}PROCEDURE (*pString p_name),VIRTUAL')
WHEN  (122) ('_IsBoundary {12}PROCEDURE (Long px, *pString pTag),Long ,VIRTUAL')
WHEN  (123) ('_Resize {16}PROCEDURE (Long pNewSize),Virtual')
WHEN  (124) ('Init {19}PROCEDURE (*File p_File, string p_FileName) ,VIRTUAL')
WHEN  (125) ('Init {19}PROCEDURE (*View p_View, string p_FileName) ,VIRTUAL')
WHEN  (126) ('SetOmitXMLHeader       PROCEDURE (Long pState),Virtual')
WHEN  (127) ('CreateFooter {11}PROCEDURE () ,VIRTUAL')
WHEN  (128) ('CreateHeader {11}PROCEDURE () ,VIRTUAL')
WHEN  (129) ('SetFile {16}PROCEDURE () ,VIRTUAL')
WHEN  (130) ('SetView {16}PROCEDURE () ,VIRTUAL')
WHEN  (131) ('SaveTweakSettings      PROCEDURE () ,VIRTUAL')
WHEN  (132) ('LoadTweakSettings      PROCEDURE () ,VIRTUAL')
WHEN  (133) ('RemovePrefixInString   PROCEDURE (*string p_String) ,VIRTUAL')
WHEN  (134) ('FreeFileData {11}PROCEDURE (File pTable) ,VIRTUAL')
WHEN  (135) ('FreeQueueData {10}PROCEDURE () ,VIRTUAL')
WHEN  (136) ('FreeGroupData {10}PROCEDURE () ,VIRTUAL')
WHEN  (137) ('InsertFileRecord       PROCEDURE () ,VIRTUAL')
WHEN  (138) ('AddQueueRecord {9}PROCEDURE (Long pFirst=0) ,VIRTUAL')
WHEN  (139) ('UpdateFileRecord       PROCEDURE () ,VIRTUAL')
WHEN  (140) ('SaveBinData {12}Procedure (<<string fileName>), long, virtual')
WHEN  (141) ('LoadBinData {12}Procedure (<<string fileName>), long, virtual')
WHEN  (142) ('ValidateRecord {9}Procedure (), long, virtual')
WHEN  (143) ('ValidateUpdateRecord   Procedure (), long, virtual')
WHEN  (144) ('GetFieldNumber {9}Procedure (string p_Field,Long p_instance=1, Long pCase=XF:CaseAny),Long, virtual')
WHEN  (145) ('SaveTweakFieldSettings Procedure (), virtual')
WHEN  (146) ('DecodeField {12}Procedure (StringTheory pStr),Virtual')
WHEN  (147) ('AssignField {12}Procedure (Long DataStartPos,Long DataEndPos),Long, virtual')
WHEN  (148) ('AssignField {12}Procedure (String pString), virtual {25}')
WHEN  (149) ('AssignQueue {12}Procedure (String pTag, String pString), virtual')
WHEN  (150) ('SetFieldPointer        Procedure (String pTag),Long, virtual')
WHEN  (151) ('IsGroup {16}Procedure(*String pTag),Long, virtual')
WHEN  (152) ('ParseAttr {14}Procedure (Long DataStartPos,Long DataEndPos), virtual')
WHEN  (153) ('ParseAttr {14}Procedure (String pAttr), virtual')
WHEN  (154) ('LoadAllOldFields       Procedure (), virtual')
WHEN  (155) ('AddOldField {12}Procedure (String p_OldFieldName, long p_PosInFile), long, virtual, proc')
WHEN  (156) ('UseCharSet {13}Procedure (Long p_Charset)')
WHEN  (157) ('SetAsAttributeA        procedure(String p_Fieldname,Long p_value,Long p_instance=1), virtual')
WHEN  (158) ('SetAsAttribute {9}procedure(String p_Fieldname,<<String p_OfName>,Long p_instance=1,Long p_OfInstance=1), Virtual')
WHEN  (159) ('ApplyDefer {13}procedure(),Virtual')
WHEN  (160) ('SetRequired {12}procedure(String p_Fieldname,Long p_Value=true,Long p_instance=1),Virtual')
WHEN  (161) ('SetAddArrayIndexToTag  Procedure(Long pState),Virtual')
WHEN  (162) ('GetTagCase {22}Procedure(),Byte,Virtual')
WHEN  (163) ('SetTagCase {22}Procedure(Byte pState),Virtual')
WHEN  (164) ('GetRemovePrefix {17}Procedure(),Long,Virtual')
WHEN  (165) ('SetRemovePrefix {17}Procedure(Long pState),Virtual')
WHEN  (166) ('GetReplaceChars {17}Procedure(),Byte,Virtual')
WHEN  (167) ('SetReplaceChars {17}Procedure(Byte pState),Virtual')
WHEN  (168) ('GetPrefixChars {18}Procedure(),String,Virtual')
WHEN  (169) ('SetPrefixChars {18}Procedure(String pState),Virtual')
WHEN  (170) ('GetPrefix {23}Procedure(),String,Virtual')
WHEN  (171) ('SetPrefix {23}Procedure(String pState),Virtual')
WHEN  (172) ('GetReplacementChars {13}Procedure(),String,Virtual')
WHEN  (173) ('SetReplacementChars {13}Procedure(String pState),Virtual')
WHEN  (174) ('GetDontReplaceColons {12}Procedure(),Byte,Virtual')
WHEN  (175) ('SetDontReplaceColons {12}Procedure(Byte pState),Virtual')
WHEN  (176) ('GetMaxPrefixLength {14}Procedure(),Long,Virtual')
WHEN  (177) ('SetMaxPrefixLength {14}Procedure(Long pState),Virtual')
WHEN  (178) ('SetDontSaveBlanks {15}Procedure(Byte pState),Virtual')
WHEN  (179) ('GetDontSaveBlanks {15}Procedure(),Byte,Virtual')
WHEN  (180) ('SetDontSaveBlankAttributes      Procedure(Byte pState),Virtual')
WHEN  (181) ('GetDontSaveBlankAttributes      Procedure(),Byte,Virtual')
WHEN  (182) ('SetDontSaveBlankGroups {10}Procedure(Byte pState),Virtual')
WHEN  (183) ('GetDontSaveBlankGroups {10}Procedure(),Byte,Virtual')
WHEN  (184) ('SetDontSaveBlankNumbers {9}Procedure(Byte pState),Virtual')
WHEN  (185) ('GetDontSaveBlankNumbers {9}Procedure(),Byte,Virtual')
WHEN  (186) ('SetDontSaveBlankStrings {9}Procedure(Byte pState),Virtual')
WHEN  (187) ('GetDontSaveBlankStrings {9}Procedure(),Byte,Virtual')
WHEN  (188) ('SetDontSaveFalseBooleans        Procedure(Byte pState),Virtual')
WHEN  (189) ('GetDontSaveFalseBooleans        Procedure(),Byte,Virtual')
WHEN  (190) ('SetFreeFileBeforeLoad {11}Procedure(Byte pState),Virtual')
WHEN  (191) ('GetFreeFileBeforeLoad {11}Procedure(),Byte,Virtual')
WHEN  (192) ('SetFreeGroupBeforeLoad {10}Procedure(Byte pState),Virtual')
WHEN  (193) ('GetFreeGroupBeforeLoad {10}Procedure(),Byte,Virtual')
WHEN  (194) ('SetFreeQueueBeforeLoad {10}Procedure(Byte pState),Virtual')
WHEN  (195) ('GetFreeQueueBeforeLoad {10}Procedure(),Byte,Virtual')
WHEN  (196) ('SetUpdateFileOnLoad {13}Procedure(Byte pState),Virtual')
WHEN  (197) ('GetUpdateFileOnLoad {13}Procedure(),Byte,Virtual')
WHEN  (198) ('SetUpdateTableOnLoad {12}Procedure(Byte pState),Virtual')
WHEN  (199) ('GetUpdateTableOnLoad {12}Procedure(),Byte,Virtual')
WHEN  (200) ('GetRecordsInserted {14}Procedure(),Long,Virtual')
WHEN  (201) ('GetRecordsUpdated {15}Procedure(),Long,Virtual')
WHEN  (202) ('SetIndentSize {19}Procedure (byte p_IndentSize) ,VIRTUAL')
WHEN  (203) ('SetIndent {23}Procedure(Long pState),Virtual')
WHEN  (204) ('GetIndent {23}Procedure(),Long,Virtual')
WHEN  (205) ('SetDemoMode {21}Procedure(Byte pMode,<<String pValue>),Virtual')
WHEN  (206) ('GetRecords {22}Procedure(),Long,Virtual')
WHEN  (207) ('GetSkipRecords {18}Procedure(),Long,Virtual')
WHEN  (208) ('SetSkipRecords {18}Procedure(Long pState),Virtual')
WHEN  (209) ('SetCRLF {25}Procedure(String pState),Virtual')
WHEN  (210) ('ClearColumnDisabled {13}Procedure(<<string pGroupName>),Virtual')
WHEN  (5)TIMES 12
WHEN  (1) ('Construct {14}Procedure ()')
WHEN  (2) ('Start {18}Procedure (),Virtual')
WHEN  (3) ('BackwardCompatibility  Procedure (),Virtual')
WHEN  (4) ('Load {19}Procedure (), long, proc, Virtual')
WHEN  (5) ('Save {19}Procedure (), long, proc, Virtual')
WHEN  (6) ('SetAsAttribute {9}Procedure (String p_Fieldname,<<String p_OfName>,Long p_instance=1,Long p_OfInstance=1), Derived')
WHEN  (7) ('SetTagCase {13}Procedure(Byte pState),Virtual')
WHEN  (8) ('SetRemovePrefix        Procedure(Byte pState),Virtual')
WHEN  (9) ('SetMaxPrefixLength     Procedure(Long pState),Virtual')
WHEN  (10) ('SetPrefixChar {10}Procedure(String pState),Virtual')
WHEN  (11) ('SetReplacementChar     Procedure(String pState),Virtual')
WHEN  (12) ('SetPrefix {14}Procedure(String pState),Virtual')
WHEN  (6)TIMES 6
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('Init {19}PROCEDURE (String p_FileName) ,VIRTUAL')
WHEN  (4) ('Save {19}PROCEDURE (long p_DontCloseNow=0),long,proc ,VIRTUAL')
WHEN  (5) ('SetSetting {13}PROCEDURE (string p_Section,string p_Name,string p_Value) ,VIRTUAL')
WHEN  (6) ('GetSetting {13}PROCEDURE (string p_Section,string p_Name,string p_Default),string ,VIRTUAL')
WHEN  (7)TIMES 11
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Init {19}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('StartTimer {13}PROCEDURE (long p_Index=1) ,VIRTUAL')
WHEN  (4) ('GetTimer {15}PROCEDURE (long p_Index=1),real ,VIRTUAL')
WHEN  (5) ('StopTimer {14}PROCEDURE (long p_Index=1) ,VIRTUAL')
WHEN  (6) ('GetTimer {15}PROCEDURE (long p_Index, long p_Format, long p_DPlaces=-1),string ,VIRTUAL')
WHEN  (7) ('GetFastClock {11}PROCEDURE (),real ,VIRTUAL')
WHEN  (8) ('Sleep {18}PROCEDURE (long p_MilliSeconds) ,VIRTUAL')
WHEN  (9) ('_InitClock {13}PROCEDURE (long p_ForceInit=0) ,VIRTUAL')
WHEN  (10) ('_InitFrequency {9}PROCEDURE () ,VIRTUAL')
WHEN  (11) ('_GetPerformanceCount   PROCEDURE (long p_lpPerformanceCount) ,VIRTUAL')
WHEN  (8)TIMES 6
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('_LoadDLL {15}PROCEDURE (),long ,VIRTUAL')
WHEN  (4) ('ExplodeFile {12}PROCEDURE (string p_InFileName, string p_OutFileName),long,proc ,VIRTUAL')
WHEN  (5) ('ExplodeMemToBinData    PROCEDURE (*string p_Buf, long p_BufLen),long,proc ,VIRTUAL')
WHEN  (6) ('Free {19}PROCEDURE () ,VIRTUAL')
WHEN  (10)TIMES 57
WHEN  (1) ('Construct {14}Procedure()')
WHEN  (2) ('Destruct {15}Procedure(),VIRTUAL')
WHEN  (3) ('Start {18}Procedure(),Virtual')
WHEN  (4) ('SetWorkSheet {11}Procedure(String p_WorksheetName,<<Long p_FullRows>,<<Long p_FullColumns>,<<Long p_ExpandedRows>,<<Long p_ExpandedColumns>),Virtual')
WHEN  (5) ('RenameWorkSheet        Procedure(String p_OldWorksheetName,String p_NewWorksheetName),Virtual')
WHEN  (6) ('DeleteWorkSheet        Procedure(String p_WorksheetName),Virtual')
WHEN  (7) ('FreeWorkSheets {9}Procedure(),Virtual')
WHEN  (8) ('WithWorkSheet {10}Procedure(String p_WorksheetName),Long,Proc,Virtual')
WHEN  (9) ('WithWorkSheetNumber    Procedure(Long p_WorksheetNumber),Long,Proc,Virtual')
WHEN  (10) ('SetSheetPrintFit       Procedure(LONG pFitWidth, Long pFitHeight),Virtual')
WHEN  (11) ('SetSheetPrintFitWidth  Procedure(LONG pFitWidth),Virtual')
WHEN  (12) ('SetSheetPrintFitHeight Procedure(LONG pFitHeight),Virtual')
WHEN  (13) ('SetPageOrientation     Procedure(STRING pOrientation),Virtual     ')
WHEN  (14) ('SetSheetHeader {9}Procedure(STRING pLeft, STRING pCenter, STRING pRight, <<REAL pMargin>),Virtual')
WHEN  (15) ('SetSheetHeader {9}Procedure(<<STRING pText>, <<REAL pMargin>) ,Virtual')
WHEN  (16) ('SetSheetHeaderMargin   Procedure(REAL pMargin),Virtual  ')
WHEN  (17) ('SetSheetFooter {9}Procedure(STRING pLeft, STRING pCenter, STRING pRight, <<REAL pMargin>),Virtual')
WHEN  (18) ('SetSheetFooter {9}Procedure(<<STRING pText>, <<REAL pMargin>),Virtual')
WHEN  (19) ('SetSheetFooterMargin   Procedure(REAL pMargin),Virtual  ')
WHEN  (20) ('SetSheetPageMargin     Procedure(<<REAL pMarginTop>,<<REAL pMarginBottom>,<<REAL pMarginLeft>,<<REAL pMarginRight>),Virtual     ')
WHEN  (21) ('SetSheetPageMarginTop  Procedure(REAL pMarginTop),Virtual     ')
WHEN  (22) ('SetSheetPageMarginBottom Procedure(REAL pMarginBottom),Virtual  ')
WHEN  (23) ('SetSheetPageMarginLeft Procedure(REAL pMarginLeft),Virtual    ')
WHEN  (24) ('SetSheetPageMarginRight Procedure(REAL pMarginRight),Virtual   ')
WHEN  (25) ('SetStyle {15}Procedure(<<String p_StyleID>,<<String p_Name>,<<String p_Parent>),String,Virtual,Proc')
WHEN  (26) ('SetStyleAlignment      Procedure(String p_StyleID,<<String p_Vertical>,<<string p_Horizontal>,<<String p_Rotate>,<<long p_WrapText>),Virtual')
WHEN  (27) ('SetStyleInterior       Procedure(String p_StyleID,<<String p_Color>,<<String p_Pattern>),Virtual')
WHEN  (28) ('SetStyleBorder {9}Procedure(String p_StyleID,String p_Position,<<String p_LineStyle>,<<Long p_Weight>,<<String p_Color>),Virtual')
WHEN  (29) ('SetStyleFont {11}Procedure(String p_StyleID,<<String p_FontName>,<<String p_Family>,<<Long p_Size>,<<String p_Color>,<<Long p_Bold>,<<Long p_Italic>,<<STRING p_Underline>),Virtual  ')
WHEN  (30) ('SetStyleNumberFormat   Procedure(String p_StyleID,<<String p_Format>),Virtual')
WHEN  (31) ('DeleteStyle {12}Procedure(String p_StyleID),Virtual')
WHEN  (32) ('FreeStyles {13}Procedure(),Virtual')
WHEN  (33) ('SetColumn {14}Procedure(Long p_Index,<<String p_StyleID>,<<String p_AutoFitWidth>,<<String p_width>),Virtual')
WHEN  (34) ('DeleteColumn {11}Procedure(Long p_Index),VIRTUAL')
WHEN  (35) ('FreeColumns {12}Procedure(),Virtual')
WHEN  (36) ('SetRow {17}Procedure(Long p_Index,<<String p_StyleID>,<<String p_AutoFitHeight>,<<string p_Height>),Virtual')
WHEN  (37) ('DeleteRow {14}Procedure(Long p_Index),VIRTUAL')
WHEN  (38) ('FreeRows {15}Procedure(),Virtual')
WHEN  (39) ('SetCellDate {12}Procedure(Long p_RowIndex, Long p_ColumnIndex,Long p_Date,<<string p_StyleID>,<<string p_Formula>,<<long p_MergeAcross>,<<long p_MergeDown>),Virtual')
WHEN  (40) ('SetCellTime {12}Procedure(Long p_RowIndex, Long p_ColumnIndex,Long p_Time,<<string p_StyleID>,<<string p_Formula>,<<long p_MergeAcross>,<<long p_MergeDown>),Virtual')
WHEN  (41) ('SetCellDateTime        Procedure(Long p_RowIndex, Long p_ColumnIndex,Long p_Date,Long p_Time,<<string p_StyleID>,<<string p_Formula>,<<long p_MergeAcross>,<<long p_MergeDown>),Virtual')
WHEN  (42) ('SetCell {16}Procedure(Long p_RowIndex, Long p_ColumnIndex,<<string p_Data>,<<string p_StyleID>,<<string p_Formula>,<<String p_Type>,<<long p_MergeAcross>,<<long p_MergeDown>),Virtual')
WHEN  (43) ('DeleteCell {13}Procedure(Long p_RowIndex, Long p_ColumnIndex),VIRTUAL')
WHEN  (44) ('FreeCells {14}Procedure(Long p_RowIndex),Virtual')
WHEN  (45) ('Save {19}Procedure(String p_FileName),Virtual')
WHEN  (46) ('Save {19}Procedure(),Virtual')
WHEN  (47) ('AddDatePicture {9}Procedure(String pClarionDatePic),Long,Virtual')
WHEN  (48) ('AddTimePicture {9}Procedure(String pClarionTimePic),Long,Virtual')
WHEN  (49) ('GetPictureNumber       Procedure(String pClarionPic),Long,Virtual')
WHEN  (50) ('ExcelDatePicture       Procedure(Long pClarionDatePic),String,Virtual')
WHEN  (51) ('ExcelTimePicture       Procedure(Long pClarionTimePic),String,Virtual')
WHEN  (52) ('ColorWeb {15}Procedure(String p_Color),String,Virtual')
WHEN  (53) ('Trace {18}Procedure(String p_Str),Virtual')
WHEN  (54) ('Numeric {16}Procedure(String pText,Long pOptions=0),Long,Virtual')
WHEN  (55) ('SetIndentSize {10}Procedure(Long pIndentSize,String pCRLF),Virtual')
WHEN  (56) ('SetSaveEncoding        Procedure(String pState),Virtual')
WHEN  (57) ('SetDontUTFEncode       Procedure(Long pState),Virtual')
WHEN  (11)TIMES 3
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('SaveCurrentFieldToXML  PROCEDURE (Long p_x,Long p_DimCounter,String p_name),VIRTUAL')
WHEN  (12)TIMES 5
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('SaveCurrentFieldToXML  PROCEDURE (Long p_x,Long p_DimCounter,String p_name),VIRTUAL')
WHEN  (4) ('_AddAttribute {10}PROCEDURE (Long p_x, *String p_string,*Long p_Len, Long p_NewLength, Long p_cs), Virtual')
WHEN  (5) ('SaveTweakFieldSettings PROCEDURE (), virtual')
WHEN  (13)TIMES 1
WHEN  (1) ('SaveTweakFieldSettings PROCEDURE (), virtual')
WHEN  (14)TIMES 4
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('SaveCurrentFieldToXML  PROCEDURE (Long p_x,Long p_DimCounter,String p_name),VIRTUAL')
WHEN  (4) ('SaveTweakFieldSettings PROCEDURE (), virtual')
WHEN  (15)TIMES 1
WHEN  (1) ('SaveTweakFieldSettings PROCEDURE (), virtual')
WHEN  (16)TIMES 4
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('SaveCurrentFieldToXML  PROCEDURE (Long p_x,Long p_DimCounter,String p_name),VIRTUAL')
WHEN  (4) ('SaveTweakFieldSettings PROCEDURE (), virtual')
WHEN  (17)TIMES 1
WHEN  (1) ('SaveTweakFieldSettings PROCEDURE (), virtual')
WHEN  (18)TIMES 3
WHEN  (1) ('Construct {21}Procedure()')
WHEN  (2) ('Destruct {22}Procedure(),VIRTUAL')
WHEN  (3) ('Start {25}Procedure(),VIRTUAL')
WHEN  (19)TIMES 127
WHEN  (1) ('Construct {24}Procedure()')
WHEN  (2) ('Destruct {25}Procedure(),VIRTUAL')
WHEN  (3) ('Start {28}Procedure(),Virtual')
WHEN  (4) ('Trace {28}Procedure(String p_Message),Virtual')
WHEN  (5) ('ErrorTrap {24}Procedure (STRING pStr),Virtual')
WHEN  (6) ('CheckProperties {18}Procedure(),Virtual')
WHEN  (7) ('NodeStart {24}Procedure(),Virtual')
WHEN  (8) ('Free {29}Procedure(Long pAppend=False),VIRTUAL')
WHEN  (9) ('FreeValues {23}Procedure(),VIRTUAL')
WHEN  (10) ('FreeAttributes {19}Procedure(),Virtual')
WHEN  (11) ('WalkTree {25}Procedure(Long pIndent=0)')
WHEN  (12) ('CheckForUtf16 {20}procedure(StringTheory pToParse),Byte,Virtual')
WHEN  (13) ('ParseXmlHeader {19}Procedure(StringTheory pToParse),Virtual')
WHEN  (14) ('LoadFile {25}Procedure(String pFiletoParse,Long pAppend=False),Long,Proc,VIRTUAL')
WHEN  (15) ('_LoadNextChunk {19}Procedure(StringTheory pStr),Long,Proc,Virtual')
WHEN  (16) ('Load {29}Procedure(StringTheory pToParse,Long pAppend=False),Long,Proc,VIRTUAL')
WHEN  (17) ('LoadString {23}Procedure(StringTheory pToParse,Long pAppend=False),Long,Proc,VIRTUAL')
WHEN  (18) ('LoadString {23}Procedure(STRING pToParse,Long pAppend=False),Long,Proc,VIRTUAL')
WHEN  (19) ('ParseComment {21}Procedure(StringTheory pToParse,Long pIndex, StringTheory rComment),Long,Virtual')
WHEN  (20) ('ParseCData {23}Procedure(StringTheory pToParse,Long pIndex, StringTheory rCData),Long,Virtual')
WHEN  (21) ('ParseProcessingInstruction       Procedure(StringTheory pToParse,Long pIndex, StringTheory rPI),Long,Virtual')
WHEN  (22) ('ParseExclaim {21}Procedure(StringTheory pToParse,Long pIndex, StringTheory rExplain),Long,Virtual')
WHEN  (23) ('ParseAttributes {18}Procedure(StringTheory pToParse,Long pIndex),Long,Virtual')
WHEN  (24) ('ParseTag {25}Procedure(StringTheory pToParse,Long pIndex),Long,Virtual')
WHEN  (25) ('ParseValue {23}Procedure(StringTheory pToParse,Long pIndex),Long,Virtual')
WHEN  (26) ('SaveFile {25}Procedure(STRING pFileName, LONG pFormat = false, Long pCompressed=false),Long,Proc,Virtual')
WHEN  (27) ('SaveString {23}Procedure(StringTheory pBuffer, LONG pFormat = false, LONG pLevel=0, Long pAppend=false),Long,Proc,Virtual')
WHEN  (28) ('SaveNode {25}Procedure(XmlTree pNode,StringTheory pBuffer, LONG pFormat, LONG pLevel),Long,Proc,Virtual')
WHEN  (29) ('SaveChildren {21}Procedure(XmlTree pNode,StringTheory pBuffer, LONG pFormat, LONG pLevel),Long,Proc,Virtual')
WHEN  (30) ('CreateAttributesString {11}procedure(),String,Virtual')
WHEN  (31) ('CreateAttributesString {11}procedure(*xFilesAttributesQueueType pAttributes),String,Virtual')
WHEN  (32) ('CreateAttributesString {11}procedure(*xFilesAttributesQueueType pAttributes,StringTheory rStr),Virtual')
WHEN  (33) ('SetAttribute {21}procedure(String pName, String pValue,Byte pNameSpaceDeclaration=false),Virtual')
WHEN  (34) ('SetAttribute {21}procedure(String pName, *String pValue,Byte pNameSpaceDeclaration=false),Virtual')
WHEN  (35) ('SetAttribute {21}procedure(String pName, StringTheory pValue,Byte pNameSpaceDeclaration=false),Virtual')
WHEN  (36) ('GetAttribute {21}procedure(String pName),String,Virtual')
WHEN  (37) ('HasAttribute {21}procedure(String pName),Long,Virtual')
WHEN  (38) ('DeleteAttribute {18}procedure(String pName),Virtual')
WHEN  (39) ('SortAttributes {19}procedure(),Virtual')
WHEN  (40) ('CreateChild {22}procedure(Long pComponentType, Long pIndex=0),Long,Proc,Virtual')
WHEN  (41) ('DeleteChild {22}procedure(Long pChild=0),Virtual')
WHEN  (42) ('AddChild {25}procedure(Long pComponentType, StringTheory pStr, Long pIndex=0),Long,Proc,Virtual')
WHEN  (43) ('AddChild {25}procedure(Long pComponentType, String pStr, Long pIndex=0),Long,Proc,Virtual')
WHEN  (44) ('SetChild {25}procedure(String pStr, Long pIndex=0),Long,Proc,Virtual')
WHEN  (45) ('SetChild {25}procedure(StringTheory pStr, Long pIndex=0),Long,Proc,Virtual')
WHEN  (46) ('GetChildValue {20}procedure(Long pIndex=0),String,Virtual')
WHEN  (47) ('Get {30}procedure(Long pIndex),*XmlTree,Virtual  ')
WHEN  (48) ('GetChildNode {21}procedure(String pName,Long pIndex=1),*XmlTree,Virtual')
WHEN  (49) ('GetLastChildNode {17}procedure(String pName),*XmlTree,Virtual')
WHEN  (50) ('GetChildWithAttribute {12}procedure(String pName),*XmlTree,Virtual')
WHEN  (51) ('AddNode {26}procedure(String pTag,StringTheory pValue, Long pIndex, Long pForce=false),*XmlTree,Virtual')
WHEN  (52) ('AddNode {26}procedure(String pTag,String pValue, Long pIndex, Long pForce=false),*XmlTree,Virtual')
WHEN  (53) ('AddNode {26}procedure(String pTag,Long pIndex=0),*XmlTree,Virtual')
WHEN  (54) ('HasHeader {24}Procedure(),Long,Proc,Virtual')
WHEN  (55) ('SetHeader {24}Procedure(),Long,Proc,Virtual')
WHEN  (56) ('DeleteHeader {21}Procedure(),Virtual')
WHEN  (57) ('Records {26}Procedure(),Long,Virtual')
WHEN  (58) ('GetNodeByName {20}Procedure(String pTag, LONG pLevelsAllowed=99999, Long pInstance=1),*XmlTree,Virtual')
WHEN  (59) ('GetByName {24}Procedure(String pTag, LONG pLevelsAllowed=99999, Long pInstance=1),*XmlTree,Virtual  ')
WHEN  (60) ('GetLastNodeByName {16}Procedure(String pTag, LONG pLevelsAllowed=99999, Long pInstance=1),*XmlTree,Virtual')
WHEN  (61) ('GetSiblingByName {17}Procedure(String pTag),*XmlTree,Virtual')
WHEN  (62) ('_GetNodeByName {19}Procedure(String pTag, LONG pLevelsAllowe, *Long pInstance, Byte pLast=0),*XmlTree,Virtual')
WHEN  (63) ('GetValueByName {19}Procedure(String pTag, Long pArrayIndex=1),String,Virtual')
WHEN  (64) ('GetValue {25}Procedure(Long pComponents = xf:value + xf:cdata + xf:raw),String,Virtual')
WHEN  (65) ('Position {25}Procedure(String pTag, Long pOffset=0),Long,Virtual')
WHEN  (66) ('HasChildNode {21}Procedure(),Long,Virtual')
WHEN  (67) ('HasAttributes {20}Procedure(),Long,Virtual')
WHEN  (68) ('HasSiblingsOfSameName {12}Procedure(),Long,Virtual')
WHEN  (69) ('HasMultipleChildrenAllOfSameName Procedure(*String pName),Long,Virtual')
WHEN  (70) ('MaxDepth {25}Procedure(),Long,Virtual')
WHEN  (71) ('IsRow {28}Procedure(),Long,Virtual')
WHEN  (72) ('RemoveNameSpaceFromTree {10}Procedure(),Virtual')
WHEN  (73) ('AttachNode {23}procedure(XmlTree pNode,Long pIndex=0),virtual')
WHEN  (74) ('_DetachNode {22}procedure(),virtual')
WHEN  (75) ('_UseProperties {19}procedure(xFilesPropertyClass pProperties),virtual')
WHEN  (76) ('SetVersion {23}Procedure(Real pState),Virtual')
WHEN  (77) ('GetVersion {23}Procedure(),Real,Virtual')
WHEN  (78) ('SetSaveEncoding {18}Procedure(String pState),Virtual')
WHEN  (79) ('GetSaveEncoding {18}Procedure(),String,Virtual')
WHEN  (80) ('SetStandAlone {20}Procedure(String pState),Virtual')
WHEN  (81) ('GetStandAlone {20}Procedure(),String,Virtual')
WHEN  (82) ('SetTreeEncoding {18}Procedure(Long pState),Virtual')
WHEN  (83) ('GetTreeEncoding {18}Procedure(),Long,Virtual')
WHEN  (84) ('SetCodePage {22}Procedure(<<Long pCharSet>,Long pCodePage=-1),Virtual')
WHEN  (85) ('GetCodePage {22}Procedure(),Long,Virtual')
WHEN  (86) ('SetLoadEncoding {18}Procedure(String pState),Virtual')
WHEN  (87) ('GetLoadEncoding {18}Procedure(),String,Virtual')
WHEN  (88) ('SetDontUTFDecode {17}Procedure(Byte pState),Virtual')
WHEN  (89) ('GetDontUTFDecode {17}Procedure(),Byte,Virtual')
WHEN  (90) ('SetForceDecimalEncode128 {9}Procedure(Long pState),Virtual')
WHEN  (91) ('GetForceDecimalEncode128 {9}Procedure(),Long,Virtual')
WHEN  (92) ('SetOmitXMLHeader {17}Procedure(Long pState),Virtual')
WHEN  (93) ('GetOmitXMLHeader {17}Procedure(),Long,Virtual')
WHEN  (94) ('SetChunk {25}Procedure(Long pState),Virtual')
WHEN  (95) ('GetChunk {25}Procedure(),Long,Virtual')
WHEN  (96) ('GetTagCase {22}Procedure(),Byte,Virtual')
WHEN  (97) ('SetTagCase {22}Procedure(Byte pState),Virtual')
WHEN  (98) ('GetRemovePrefix {17}Procedure(),Long,Virtual')
WHEN  (99) ('SetRemovePrefix {17}Procedure(Long pState),Virtual')
WHEN  (100) ('GetPrefix {23}Procedure(),String,Virtual')
WHEN  (101) ('SetPrefix {23}Procedure(String pState),Virtual')
WHEN  (102) ('GetReplaceChars {17}Procedure(),Byte,Virtual')
WHEN  (103) ('SetReplaceChars {17}Procedure(Byte pState),Virtual')
WHEN  (104) ('GetPrefixChars {18}Procedure(),String,Virtual')
WHEN  (105) ('SetPrefixChars {18}Procedure(String pState),Virtual')
WHEN  (106) ('GetReplacementChars {13}Procedure(),String,Virtual')
WHEN  (107) ('SetReplacementChars {13}Procedure(String pState),Virtual')
WHEN  (108) ('GetMaxPrefixLength {14}Procedure(),Long,Virtual')
WHEN  (109) ('SetMaxPrefixLength {14}Procedure(Long pState),Virtual')
WHEN  (110) ('SetIndentSize {19}Procedure (byte pState) ,VIRTUAL')
WHEN  (111) ('SetIndent {23}Procedure(Long pState),Virtual')
WHEN  (112) ('GetIndent {23}Procedure(),Long,Virtual')
WHEN  (113) ('SetCRLF {25}Procedure(String pState),Virtual')
WHEN  (114) ('SetAddArrayIndexToTag {12}Procedure(Long pState),Virtual')
WHEN  (115) ('GetAddArrayIndexToTag {12}Procedure(),Long,Virtual')
WHEN  (116) ('SetDontAbbreviateEmptyTags       Procedure(Long pState),Virtual')
WHEN  (117) ('GetDontAbbreviateEmptyTags       Procedure(),Long,Virtual')
WHEN  (118) ('SetDontSaveBlanks {16}Procedure(Byte pState),Virtual')
WHEN  (119) ('GetDontSaveBlanks {16}Procedure(),Byte,Virtual')
WHEN  (120) ('SetDontSaveBlankAttributes       Procedure(Byte pState),Virtual')
WHEN  (121) ('GetDontSaveBlankAttributes       Procedure(),Byte,Virtual')
WHEN  (122) ('SetDontSaveFalseBooleans {9}Procedure(Byte pState),Virtual')
WHEN  (123) ('GetDontSaveFalseBooleans {9}Procedure(),Byte,Virtual')
WHEN  (124) ('SetDontSaveBlankGroups {11}Procedure(Byte pState),Virtual')
WHEN  (125) ('GetDontSaveBlankGroups {11}Procedure(),Byte,Virtual')
WHEN  (126) ('Flatten {26}Procedure(StringTheory pFlat),Virtual')
WHEN  (127) ('_Flatten {25}Procedure(StringTheory pFlat,String pNodeName),Virtual')
WHEN  (20)TIMES 146
WHEN  (1) ('Construct {23}Procedure()')
WHEN  (2) ('Destruct {24}Procedure(),Virtual')
WHEN  (3) ('Start {27}Procedure(),Virtual')
WHEN  (4) ('FreeFileData {20}Procedure(File pTable),Virtual')
WHEN  (5) ('FormatValue {21}Procedure(*Cstring pGroupName, *Cstring pName, String pValue),String,Virtual')
WHEN  (6) ('DeformatValue {19}Procedure(*Cstring pGroupName, *Cstring pName, String pValue),String,Virtual')
WHEN  (7) ('AssignValue {21}Procedure(XmlTree pNode,*Cstring pGroupName,*CString pColumnName,*Group pGroup,*Long pIndex,Long pColumnOffset,Long pOptions=0),Virtual')
WHEN  (8) ('AddValueToNode {18}Procedure(XmlTree pNode,*Cstring pGroupName,*Cstring pColumnName,StringTheory pPropertyValue,Byte pBinary,Byte pClip, Long pIfEmpty),Virtual')
WHEN  (9) ('AddValueToNode {18}Procedure(XmlTree pNode,*Cstring pGroupName,*Cstring pColumnName,*String pPropertyValue,Byte pBinary,Byte pClip, Long pIfEmpty),Virtual')
WHEN  (10) ('AddValueToNode {18}Procedure(XmlTree pNode,*Cstring pGroupName,*Cstring pColumnName,String pPropertyValue,Byte pBinary,Byte pClip, Long pIfEmpty),Virtual')
WHEN  (11) ('AddTableToNode {18}Procedure(XmlTree pNode,*File pTable,*Cstring pGroupName,String pTableBoundary,String pRowBoundary,Long pColumnOffset=0),*XmlTree,Virtual')
WHEN  (12) ('AddToNode {23}Procedure(XmlTree pNode,*Queue pQueue,*Cstring pGroupName,String pQueueBoundary,String pRowBoundary),*XmlTree,Virtual')
WHEN  (13) ('AddToNode {23}Procedure(XmlTree pNode,*Group pGroup,*Cstring pGroupName,String pBoundary,Long pColumnOffset=0),*XmlTree,Virtual')
WHEN  (14) ('AddToNode {23}Procedure(XmlTree pNode,*File pTable,*Cstring pGroupName,String pBoundary,Long pColumnOffset=0),*XmlTree,Virtual')
WHEN  (15) ('AddMemosToNode {18}Procedure(XmlTree pNode,*Cstring pGroupName,*File pTable,Long pIfEmpty),Virtual')
WHEN  (16) ('AddBlobsToNode {18}Procedure(XmlTree pNode,*Cstring pGroupName,*File pTable,Long pIfEmpty),Virtual')
WHEN  (17) ('Open {28}Procedure(String pTagName),VIRTUAL')
WHEN  (18) ('Add {29}Procedure(*FILE pTable,String pTableBoundary,String pRowBoundary),Virtual')
WHEN  (19) ('Add {29}Procedure(*FILE pTable,String pGroupName,String pTableBoundary,String pRowBoundary),Virtual')
WHEN  (20) ('Add {29}Procedure(*FILE pTable,*Cstring pGroupName,String pTableBoundary,String pRowBoundary, Long pLoop),Virtual')
WHEN  (21) ('Add {29}Procedure(*VIEW pView,String pViewBoundary,String pRowBoundary),Virtual')
WHEN  (22) ('Add {29}Procedure(*VIEW pView,string pGroupName,String pViewBoundary,String pRowBoundary),Virtual')
WHEN  (23) ('Add {29}Procedure(*VIEW pView,*Cstring pGroupName,String pViewBoundary,String pRowBoundary, Long pLoop),Virtual')
WHEN  (24) ('Add {29}Procedure(*QUEUE pQueue,String pQueueBoundary,String pRowBoundary),Virtual')
WHEN  (25) ('Add {29}Procedure(*QUEUE pQueue,String pGroupName,String pQueueBoundary,String pRowBoundary),Virtual')
WHEN  (26) ('Add {29}Procedure(*QUEUE pQueue,*Cstring pGroupName,String pQueueBoundary,String pRowBoundary, Long pLoop),Virtual')
WHEN  (27) ('Add {29}Procedure(*GROUP pGroup,String pBoundary ),Virtual')
WHEN  (28) ('Add {29}Procedure(*GROUP pGroup,String pBoundary, String pRowBoundary),Virtual')
WHEN  (29) ('Add {29}Procedure(*GROUP pGroup,String pGroupName,String pBoundary,String pRowBoundary),Virtual')
WHEN  (30) ('Add {29}Procedure(*GROUP pGroup,*Cstring pGroupName,String pBoundary, String pRowBoundary, Long pLoop),Virtual')
WHEN  (31) ('Save {28}Procedure(*FILE pTable,String pTableBoundary,String pRowBoundary),Long,Proc,Virtual')
WHEN  (32) ('Save {28}Procedure(*FILE pTable,String pFilename,String pTableBoundary,String pRowBoundary, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (33) ('Save {28}Procedure(*FILE pTable,*StringTheory pBuffer,String pTableBoundary,String pRowBoundary, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (34) ('Save {28}Procedure(*VIEW pView,String pTableBoundary,String pRowBoundary),Long,Proc,Virtual')
WHEN  (35) ('Save {28}Procedure(*VIEW pView,String pTableBoundary),Long,Proc,Virtual')
WHEN  (36) ('Save {28}Procedure(*VIEW pView,<<String pFilename>,String pTableBoundary,String pRowBoundary, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (37) ('Save {28}Procedure(*VIEW pView,*StringTheory pBuffer,String pTableBoundary,<<String pRowBoundary>, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (38) ('Save {28}Procedure(*QUEUE pQueue,String pQueueBoundary,String pRowBoundary),Long,Proc,Virtual')
WHEN  (39) ('Save {28}Procedure(*QUEUE pQueue,String pFilename,String pQueueBoundary,String pRowBoundary, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (40) ('Save {28}Procedure(*QUEUE pQueue,*StringTheory pBuffer,String pQueueBoundary,String pRowBoundary, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (41) ('Save {28}Procedure(*QUEUE pQueue,*StringTheory pBuffer,String pQueueBoundary),Long,Proc,Virtual')
WHEN  (42) ('Save {28}Procedure(*GROUP pGroup,String pBoundary),Long,Proc,Virtual')
WHEN  (43) ('Save {28}Procedure(*GROUP pGroup,String pFilename,String pBoundary, <<String pRowBoundary>, Long pFormat=true, Long pCompressed=false, Long pLoop=false),Long,Proc,Virtual')
WHEN  (44) ('Save {28}Procedure(*GROUP pGroup,*StringTheory pBuffer,String pBoundary,<<String pRowBoundary>, Long pFormat=true, Long pCompressed=false, Long pLoop=false),Long,Proc,Virtual')
WHEN  (45) ('Load {28}Procedure(*File pTable,String pTableBoundary,String pRowBoundary),Long,Proc,Virtual')
WHEN  (46) ('Load {28}Procedure(*File pTable, string pFileName), long, proc, virtual')
WHEN  (47) ('Load {28}Procedure(*File pTable,String pFilename,String pTableBoundary,String pRowBoundary, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (48) ('Load {28}Procedure(*File pTable,*StringTheory pBuffer,String pTableBoundary,String pRowBoundary, Long pFormat=true, Long pCompressed=false, Long pLoop=true),Long,Proc,Virtual')
WHEN  (49) ('Load {28}Procedure(*File pTable, *string p_String, *long p_Length), long, proc, virtual')
WHEN  (50) ('Load {28}Procedure(*File pTable, *string p_String, long p_Length, string pTableBoundary, string pRowBoundary), long, proc, virtual')
WHEN  (51) ('Load {28}Procedure(*Queue pQueue, string pFilename), long, proc ,VIRTUAL')
WHEN  (52) ('Load {28}Procedure(*Queue pQueue, *string pString, *long pLength), long, proc, virtual  ')
WHEN  (53) ('Load {28}Procedure(*Queue pQueue, *string pString, long pLength,string pQueueBoundary,string pRowBoundary), long, proc, virtual  ')
WHEN  (54) ('Load {28}Procedure(*Queue pQueue,String pFilename,String pQueueBoundary,String pRowBoundary),Long,Proc,Virtual')
WHEN  (55) ('Load {28}Procedure(*Queue pQueue,*StringTheory pBuffer,String pQueueBoundary,String pRowBoundary),Long,Proc,Virtual')
WHEN  (56) ('Load {28}Procedure(*Queue pQueue,String pQueueBoundary,String pRowBoundary),Long,Proc,Virtual')
WHEN  (57) ('_Load {27}Procedure(*XmlTree pNode,*QUEUE pQueue,*Cstring pGroupName,String pQueueBoundary,String pRowBoundary,Long pProgress),Long,Proc,Virtual')
WHEN  (58) ('Load {28}PROCEDURE(*Group pGroup, string pFilename,string pFileBoundary,string pBoundary), long, proc, virtual')
WHEN  (59) ('Load {28}PROCEDURE(*Group pGroup, *string pString, *long pLength), long, proc, virtual  ')
WHEN  (60) ('Load {28}PROCEDURE(*Group pGroup, *string pString, long pLength,string pFileBoundary,string pBoundary), long, proc, virtual  ')
WHEN  (61) ('Load {28}Procedure(*Group pGroup,String pFilename,String pBoundary),Long,Proc,Virtual')
WHEN  (62) ('Load {28}Procedure(*Group pGroup,StringTheory pBuffer,String pBoundary),Long,Proc,Virtual')
WHEN  (63) ('Load {28}Procedure(*Group pGroup,String pBoundary),Long,Proc,Virtual')
WHEN  (64) ('ValidateRecord {18}Procedure(),Long,Proc,Virtual')
WHEN  (65) ('ValidateUpdateRecord {12}Procedure (), long, virtual')
WHEN  (66) ('ValidateField {19}Procedure(String pFieldName, Long pFieldNumber),Long,Proc,Virtual')
WHEN  (67) ('CalcProgress {20}Procedure(),Virtual')
WHEN  (68) ('CalcProgress {20}Procedure(Long pProgress),Virtual')
WHEN  (69) ('AfterReflectionParse {12}Procedure(String pGroupName,*Group pGroup),Virtual')
WHEN  (70) ('AfterReflectionParse {12}Procedure(String pGroupName,*Queue pQueue),Virtual')
WHEN  (71) ('AfterReflectionParse {12}Procedure(String pGroupName,*File pTable),Virtual')
WHEN  (72) ('AfterReflectionParse {12}Procedure(String pGroupName,*View pView),Virtual')
WHEN  (73) ('ClearColumnDisabled {13}Procedure(<<string pGroupName>),Virtual')
WHEN  (74) ('SetColumnDisabled {15}Procedure(*Cstring pGroupName,*Cstring pFieldName,Long pState),Virtual')
WHEN  (75) ('GetColumnDisabled {15}Procedure(*Cstring pGroupName,*Cstring pFieldName),Long,Virtual')
WHEN  (76) ('SetUpdateFileOnLoad {13}Procedure(Byte pState),Virtual')
WHEN  (77) ('SetUpdateTableOnLoad {12}Procedure(Byte pState),Virtual')
WHEN  (78) ('GetUpdateFileOnLoad {13}Procedure(),Byte,Virtual')
WHEN  (79) ('GetUpdateTableOnLoad {12}Procedure(),Byte,Virtual')
WHEN  (80) ('SetWriteOmittedString {11}Procedure(Byte pState),Virtual')
WHEN  (81) ('GetWriteOmittedString {11}Procedure(),Byte,Virtual')
WHEN  (82) ('SetWriteOmittedNumeric {10}Procedure(Byte pState),Virtual')
WHEN  (83) ('GetWriteOmittedNumeric {10}Procedure(),Byte,Virtual')
WHEN  (84) ('SetOmittedStringDefaultValue    Procedure(String pState),Virtual')
WHEN  (85) ('GetOmittedStringDefaultValue    Procedure(),String,Virtual')
WHEN  (86) ('SetOmittedNumericDefaultValue   Procedure(Real pState),Virtual')
WHEN  (87) ('GetOmittedNumericDefaultValue   Procedure(),Real,Virtual')
WHEN  (88) ('SetNestViewRecords {14}Procedure(Byte pState),Virtual')
WHEN  (89) ('GetNestViewRecords {14}Procedure(),Byte,Virtual')
WHEN  (90) ('SetNoMemo {23}Procedure(Byte pState),Virtual')
WHEN  (91) ('GetNoMemo {23}Procedure(),Byte,Virtual')
WHEN  (92) ('SetFreeFileBeforeLoad {11}Procedure(Byte pState),Virtual')
WHEN  (93) ('GetFreeFileBeforeLoad {11}Procedure(),Byte,Virtual')
WHEN  (94) ('SetFreeGroupBeforeLoad {10}Procedure(Byte pState),Virtual')
WHEN  (95) ('GetFreeGroupBeforeLoad {10}Procedure(),Byte,Virtual')
WHEN  (96) ('SetFreeQueueBeforeLoad {10}Procedure(Byte pState),Virtual')
WHEN  (97) ('GetFreeQueueBeforeLoad {10}Procedure(),Byte,Virtual')
WHEN  (98) ('GetRecordsInserted {14}Procedure(),Long,Virtual')
WHEN  (99) ('GetRecordsUpdated {15}Procedure(),Long,Virtual')
WHEN  (100) ('GetRecords {22}Procedure(),Long,Virtual')
WHEN  (101) ('GetSkipRecords {18}Procedure(),Long,Virtual')
WHEN  (102) ('SetSkipRecords {18}Procedure(Long pState),Virtual')
WHEN  (103) ('SetDemoMode {21}Procedure(Byte pMode,<<String pValue>),Virtual')
WHEN  (104) ('FreeTableQueue {18}Procedure(),Virtual')
WHEN  (105) ('WithTable {23}Procedure(*FILE pTable) ,Long,Virtual')
WHEN  (106) ('WithViewFieldNumber {13}Procedure(Long pViewFieldNumber),Long,Virtual')
WHEN  (107) ('BuildTableQueue {17}Procedure(View pView),Virtual')
WHEN  (108) ('SetViewBoundary {17}Procedure(View pView, *File pTable, String pTableBoundary),Virtual')
WHEN  (109) ('SetViewBoundary {17}Procedure(View pView, *File pTable, String pTableBoundary, String pRowBoundary),Virtual')
WHEN  (110) ('_GetHash {24}Procedure(File pTable, Long pTableFieldNumber),String,Virtual')
WHEN  (111) ('_IsDifferent {20}Procedure(View pView),Long,Virtual')
WHEN  (112) ('_ClearChildValues {15}Procedure(Long pTableId),Virtual')
WHEN  (113) ('_SaveFieldValues {16}Procedure(View pView, Long pTableId),Virtual')
WHEN  (114) ('_AddViewNode {20}Procedure(View pView, *Cstring pGroupName, Long pTableId),Virtual')
WHEN  (115) ('_AddViewField {19}Procedure(View pView, Long pFieldNumber, *Cstring pGroupName, *XmlTree pNode),Long,Virtual')
WHEN  (116) ('_AddViewRecordFlat {14}Procedure(View pView, *Cstring pGroupName, XmlTree pNode, String pRowBoundary),Virtual')
WHEN  (117) ('_AddViewRecordNested {12}Procedure(View pView, *Cstring pGroupName),Virtual')
WHEN  (118) ('FillStructure {19}Procedure(*Cstring pGroupName,XmlTree pNode,*GROUP pGroup),Long,Proc,VIRTUAL')
WHEN  (119) ('FillAttribute {19}Procedure(*Cstring pGroupName, *CString pColumnName,  XmlTree pNode, *CString pTagName, *? pField),Long,Proc,VIRTUAL')
WHEN  (120) ('FillField {23}Procedure(*Cstring pGroupName, *CString pColumnName, XmlTree pNode,*GROUP pGroup, *Long pFieldNumber, Long pArrayIndex=0),Long,Proc,VIRTUAL')
WHEN  (121) ('FillField {23}Procedure(*Cstring pGroupName, *CString pColumnName, XmlTree pNode,*File pTable, *Long pFieldNumber, Long pArrayIndex=0),Long,Proc,VIRTUAL')
WHEN  (122) ('FillBlobs {23}Procedure(*Cstring pGroupName,XmlTree pNode,*FILE pTable),Long,Proc,Virtual')
WHEN  (123) ('FillBlob {24}Procedure(*Cstring pGroupName,XmlTree pNode,*FILE pTable,Long pFieldNumber),Long,Proc,Virtual')
WHEN  (124) ('XMLToTable {22}Procedure(*Cstring pGroupName,XmlTree pNode,*FILE pTable),Long,Proc,Virtual')
WHEN  (125) ('AssignValue {21}Procedure(*Cstring pGroupName, *CString pColumnName, *? pField, StringTheory pStr),Virtual')
WHEN  (126) ('AssignMissingField {14}Procedure(*Cstring pGroupName, *Cstring pColumnName),Virtual')
WHEN  (127) ('AssignField {21}Procedure(*Cstring pGroupName, *Cstring pColumnName, String pValue),VIRTUAL')
WHEN  (128) ('NewPointer {22}procedure(*Cstring pGroupName, *CString pColumnName),Virtual')
WHEN  (129) ('InsertFileRecord {16}Procedure(*FILE pTable),Long,Proc,Virtual')
WHEN  (130) ('UpdateFileRecord {16}Procedure(*FILE pTable),Long,Proc,Virtual')
WHEN  (131) ('AddQueueRecord {18}Procedure(*Queue pQueue, *Cstring pGroupName, Long pFirst=0),Long,Proc,Virtual')
WHEN  (132) ('FindUniqueKey {19}Procedure(*FILE pTable, *KEY pKey),Long,Virtual')
WHEN  (133) ('SetAsAttribute {18}Procedure(String pGroupName, String pColumnName, <<String pParent>),Virtual')
WHEN  (134) ('_cachePrivate {19}Procedure(),Virtual')
WHEN  (135) ('Parse {27}Procedure(*Group pGroup),Virtual')
WHEN  (136) ('Parse {27}Procedure(*Queue pQueue),Virtual')
WHEN  (137) ('Parse {27}Procedure(*File pTable),Virtual')
WHEN  (138) ('Parse {27}Procedure(*View pView),Virtual')
WHEN  (139) ('SetType {25}Procedure(View pView,File pTable,String pField,Long pType),Virtual')
WHEN  (140) ('SetPicture {22}Procedure(View pView,File pTable,String pField,String pPicture),Virtual')
WHEN  (141) ('SetAttribute {20}Procedure(View pView,File pTable,String pField,String pAttribute),Virtual')
WHEN  (142) ('XMLtoHTML {23}Procedure(StringTheory p_xml),STRING,VIRTUAL')
WHEN  (143) ('XMLtoHTML {23}Procedure(String p_xml),STRING,VIRTUAL')
WHEN  (144) ('DisposeGroup {20}Procedure(*Group pGroup,Long pDispose=false),Virtual')
WHEN  (145) ('DisposeQueue {20}Procedure(*Queue pQueue,Long pDispose=false),Virtual')
WHEN  (146) ('Debug {27}Procedure(long pX),Virtual')
WHEN  (21)TIMES 5
WHEN  (1) ('Construct {19}Procedure()')
WHEN  (2) ('Destruct {20}Procedure(),Virtual')
WHEN  (3) ('LoadXsd {21}Procedure(String pFileName),Virtual')
WHEN  (4) ('LoadXsd {21}Procedure(StringTheory pXsd),Virtual')
WHEN  (5) ('ToClarion {19}Procedure(StringTheory pClarion, Long pFlags=0, Long pIndent=25),Virtual')
WHEN  (22)TIMES 7
WHEN  (1) ('Construct {22}Procedure()')
WHEN  (2) ('Destruct {23}Procedure(),Virtual')
WHEN  (3) ('Start {26}Procedure(),Virtual')
WHEN  (4) ('Load {27}Procedure(String pFileName),Long,Proc,Virtual')
WHEN  (5) ('Load {27}Procedure(StringTheory pStr),Long,Proc,Virtual')
WHEN  (6) ('ParseInput {21}Procedure(),Virtual')
WHEN  (7) ('_ParseInput {20}Procedure(XmlTree pInNode,XmlTree pOutNode),Virtual')
WHEN  (23)TIMES 34
WHEN  (1) ('Construct {23}Procedure()')
WHEN  (2) ('Destruct {24}Procedure(),Virtual')
WHEN  (3) ('Start {27}Procedure(),Virtual')
WHEN  (4) ('Trace {27}Procedure(String pStr),Virtual')
WHEN  (5) ('ViewStructures {18}Procedure(),Virtual')
WHEN  (6) ('GetStructure {20}Procedure(String pPath, String pTagName, Long pLevel=0 , long pFlags=0),Long,Proc,Virtual')
WHEN  (7) ('SetStructureAsQueue {13}Procedure(String pName),Virtual')
WHEN  (8) ('SetStructureHasValue {12}Procedure(Byte pValue),Virtual')
WHEN  (9) ('SetField {24}Procedure(String pTagName, String pDataType, Byte pIsParentValue=0, string pDebug),Virtual')
WHEN  (10) ('SetFieldAsAttribute {13}Procedure(),Virtual')
WHEN  (11) ('GetFieldType {20}Procedure(XmlTree pXml,Long pOptions=0),String,Virtual')
WHEN  (12) ('ToClarion {23}Procedure(XmlTree pXML, StringTheory pClarion, Long pFlags=0, Long pIndent=25),Virtual')
WHEN  (13) ('ParseXML {24}Procedure(XmlTree pXML, String pPath, Long pLevel),Virtual')
WHEN  (14) ('SetLabel {24}Procedure(String pName,Long pForceUnique=false),String,Virtual')
WHEN  (15) ('LookForMissingValues {12}Procedure(XmlTree pXML),Long,Virtual')
WHEN  (16) ('ResolveUp {23}Procedure(String pFullPath, String pFieldName, String pType, String pRowName)')
WHEN  (17) ('ResolveTypes {20}Procedure(),Virtual')
WHEN  (18) ('ResolveDuplicates {15}Procedure(),Virtual')
WHEN  (19) ('GenerateStructures {14}Procedure(Long pIndent),Virtual')
WHEN  (20) ('GenerateStructure {15}Procedure(Long pIndent),Virtual')
WHEN  (21) ('GenerateFields {18}Procedure(xfFieldsQueueType pFieldsQueue, Long pIndent),Virtual')
WHEN  (22) ('IsPathNameQueue {17}Procedure(string pPath),Long,Virtual')
WHEN  (23) ('TidyUp {26}Procedure(String pName, String pType),Virtual')
WHEN  (24) ('DeclareObject {19}Procedure(Long pFlags, Long pIndent),Virtual')
WHEN  (25) ('WriteCode {23}Procedure(String pStructure, String pBoundary,String pRowBoundary, String pType),Virtual')
WHEN  (26) ('AddSaveProperties {15}Procedure(),Virtual')
WHEN  (27) ('AddLoadProperties {15}Procedure(),Virtual')
WHEN  (28) ('AddDerivedMethods {15}Procedure(String pStructure, String pBoundary,String pRowBoundary),Virtual')
WHEN  (29) ('AddDerivedMethods2 {15}Procedure(String pStructure, String pBoundary,String pRowBoundary),Virtual')
WHEN  (30) ('PopulateLoad {20}Procedure(),Virtual')
WHEN  (31) ('PopulateSave {20}Procedure(),Virtual')
WHEN  (32) ('AfterLoad {23}Procedure(),Virtual')
WHEN  (33) ('AfterSave {23}Procedure(),Virtual')
WHEN  (34) ('BeforeSave {22}Procedure(),Virtual')

%dImplements8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 0

%dImplements8C DEPEND %dImplements8Cx DEFAULT TIMES 0

%dClasses8Bci DEPEND %dClasses8Bx DEFAULT TIMES 23
WHEN  (1) ('xFileBase')
WHEN  (2) ('xFileLinkDLL')
WHEN  (3) ('xFileBinary')
WHEN  (4) ('xFilesStream')
WHEN  (5) ('xFileXML')
WHEN  (6) ('xFileSettings')
WHEN  (7) ('xFileFastTimer')
WHEN  (8) ('xFileExplode')
WHEN  (9) ('xFileBaseCompress')
WHEN  (10) ('xCell')
WHEN  (11) ('xCellWorkBook')
WHEN  (12) ('xCellStyles')
WHEN  (13) ('xCellBorders')
WHEN  (14) ('xCellWorksheets')
WHEN  (15) ('xCellColumns')
WHEN  (16) ('xCellRows')
WHEN  (17) ('xCellCells')
WHEN  (18) ('xFilesPropertyClass')
WHEN  (19) ('XmlTree')
WHEN  (20) ('xFilesTree')
WHEN  (21) ('xFilesXsdClass')
WHEN  (22) ('xFilesSchemaClass')
WHEN  (23) ('XmlClarionClass')

%dInterfaces8Bx MULTI LONG  ()
%dInterfaces8B DEPEND %dInterfaces8Bx DEFAULT TIMES 0

%dInterfaceINCFile DEPEND %dInterfaces8Bx DEFAULT TIMES 0

%dMethods8Dx DEPEND %dInterfaces8Bx MULTI LONG TIMES 0

%dMethods8D DEPEND %dMethods8Dx DEFAULT TIMES 0

%dAdditionalINCFiles MULTI LONG  ()
%dAdditionalINCFile DEPEND %dAdditionalINCFiles DEFAULT TIMES 0

%dClassVersion DEFAULT  ('81595')
[ADDITION]
NAME WinEvent EnableWinEvent
[INSTANCE]
INSTANCE 5
[PROMPTS]
%GloDisableWinEvent LONG  (0)
%WinEventVersionWasAt DEFAULT  ('5.41')
%gloAutoDown LONG  (1)
%gloHandleCloseDown LONG  (1)
%gloDelayProcessCloseDown LONG  (1)
%gloWindowsVisible LONG  (1)
%gloWinEventDebug LONG  (0)
%gloWinEventMouseWheelCtrl LONG  (1)
%DisableMP LONG  (0)
%EnableGloVersionNumberVariable LONG  (0)
%GloVersionNumberVariable DEFAULT  ('')
%UseWinEventCloseWindow LONG  (0)
%GaltWinFix LONG  (1)
%MultiDLL LONG  (0)
%RootDLL LONG  (0)
%dClasses8Bx MULTI LONG  (1, 2, 3, 4)
%dClasses8B DEPEND %dClasses8Bx DEFAULT TIMES 4
WHEN  (1) ('')
WHEN  (2) ('')
WHEN  (3) ('_WINEVENTASM')
WHEN  (4) ('OLEINIT')

%dBaseClass DEPEND %dClasses8Bx DEFAULT TIMES 2
WHEN  (1) ('LONG class, *CSTRING key, *LONG hkey')
WHEN  (2) ('LONG class, *CSTRING key, *LONG hkey')

%dClassINCFile DEPEND %dClasses8Bx DEFAULT TIMES 4
WHEN  (1) ('WINEVENT.INC')
WHEN  (2) ('WINEVENT.INC')
WHEN  (3) ('WINEVENT.INC')
WHEN  (4) ('WINEVENT.INC')

%dMethods8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 1
WHEN  (4) (1, 2)

%dMethods8C DEPEND %dMethods8Cx DEFAULT TIMES 1
WHEN  (4)TIMES 2
WHEN  (1) ('Construct        PROCEDURE()')
WHEN  (2) ('Destruct {9}PROCEDURE()')

%dImplements8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 0

%dImplements8C DEPEND %dImplements8Cx DEFAULT TIMES 0

%dClasses8Bci DEPEND %dClasses8Bx DEFAULT TIMES 4
WHEN  (1) ('')
WHEN  (2) ('')
WHEN  (3) ('_WinEventAsm')
WHEN  (4) ('OLEInit')

%dInterfaces8Bx MULTI LONG  (1)
%dInterfaces8B DEPEND %dInterfaces8Bx DEFAULT TIMES 1
WHEN  (1) ('IOLE')

%dInterfaceINCFile DEPEND %dInterfaces8Bx DEFAULT TIMES 1
WHEN  (1) ('WINEVENT.INC')

%dMethods8Dx DEPEND %dInterfaces8Bx MULTI LONG TIMES 1
WHEN  (1) (1, 2, 3)

%dMethods8D DEPEND %dMethods8Dx DEFAULT TIMES 1
WHEN  (1)TIMES 3
WHEN  (1) ('QueryInterface   PROCEDURE (*we:IID  riid,*LONG ppvobj),HRESULT,RAW   ')
WHEN  (2) ('AddRef {11}PROCEDURE (),HRESULT,RAW')
WHEN  (3) ('Release {10}PROCEDURE (),HRESULT,RAW,PROC')

%dAdditionalINCFiles MULTI LONG  ()
%dAdditionalINCFile DEPEND %dAdditionalINCFiles DEFAULT TIMES 0

%dClassVersion DEFAULT  ('81595')
[ADDITION]
NAME cwVersionRes cwVersionRes
[INSTANCE]
INSTANCE 4
[PROMPTS]
%verCoName DEFAULT  ('Donald Ridley')
%verCopyright DEFAULT  ('Copyright (c) 2024')
%verTrademarks DEFAULT  ('Trademark')
%verComments DEFAULT  ('')
%verExtProdVersion LONG  (0)
%verSourceFile DEFAULT  ('')
%verProdName DEFAULT  ('Clarion Recents CLI')
%verProdMajVer DEFAULT  ('1')
%verProdMinVer DEFAULT  ('0')
%verProdSubVer DEFAULT  ('0')
%verProdGenBuildNo LONG  (1)
%verProdBuildNo DEFAULT  ('5')
%verDesc DEFAULT  ('')
%verFileAsProdVersion LONG  (1)
%verIntName DEFAULT  ('Clarion Recents CLI')
%verFileMajVer DEFAULT  ('1')
%verFileMinVer DEFAULT  ('0')
%verFileSubVer DEFAULT  ('0')
%verFileGenBuildNo LONG  (1)
%verFileBuildNo DEFAULT  ('5')
%verFilePreRelease LONG  (0)
%verSelLangID DEFAULT  ('U.S. English')
%verSelCPID DEFAULT  ('Multilingual')
%verIncludeCW LONG  (1)
%verClarionVersion DEFAULT  ('11100')
%verTemplateFamily DEFAULT  ('ABC')
%verTemplateVersion DEFAULT  ('v11.1')
%verUserLabel1 DEFAULT  ('')
%verUserValue1 DEFAULT  ('')
%verUserLabel2 DEFAULT  ('')
%verUserValue2 DEFAULT  ('')
%verUserLabel3 DEFAULT  ('')
%verUserValue3 DEFAULT  ('')
%verUserLabel4 DEFAULT  ('')
%verUserValue4 DEFAULT  ('')
[PERSIST]
%SaveCreateLocalMap DEFAULT  ('1')
%GenerationCompleted DEPEND %Module DEFAULT TIMES 2
WHEN  ('ClarionRecentsCLI.clw') ('1')
WHEN  ('ClarionRecentsCLI001.clw') ('1')

%LastTarget32 DEFAULT  ('1')
%LastProgramExtension DEFAULT  ('EXE')
%LastApplicationDebug DEFAULT  ('')
%LastApplicationLocalLibrary DEFAULT  ('')
[PROJECT]
#system win32 exe
#model clarion dll
#pragma define(StringTheoryLinkMode=>1) -- GENERATED
#pragma define(StringTheoryDllMode=>0) -- GENERATED
#pragma define(MD5=>0) -- GENERATED
#pragma define(ReflectionLM=>1) -- GENERATED
#pragma define(ReflectionDM=>0) -- GENERATED
#pragma define(xFilesLinkMode=>1) -- GENERATED
#pragma define(xFilesDllMode=>0) -- GENERATED
#pragma define(_XFILES_=>1) -- GENERATED
#pragma define(_XFILES4_=>1) -- GENERATED
#pragma define(WinEventLinkMode=>1) -- GENERATED
#pragma define(WinEventDLLMode=>0) -- GENERATED
#pragma define(_ABCDllMode_=>0) -- GENERATED
#pragma define(_ABCLinkMode_=>1) -- GENERATED
#compile "ClarionRecentsCLI.clw" -- GENERATED
#compile "ClarionRecentsCLI001.clw" -- GENERATED
#compile "ClarionRecentsCLI_BC0.CLW" -- GENERATED
#compile "CLARIONRECENTSCLI_BC.CLW" -- GENERATED
#pragma link("ClarionRecentsCLI.EXE.manifest") -- GENERATED
#pragma link("ClarionRecentsCLI.Version") -- GENERATED
#link "ClarionRecentsCLI.EXE"
[PROGRAM]
[COMMON]
FROM ABC ABC
MODIFIED '2024/05/22' ' 7:54:00'
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2024/05/22' ' 7:53:30'
[PROCEDURE]
NAME Main
[COMMON]
FROM ABC Window
MODIFIED '2024/05/22' ' 9:25:33'
[DATA]
[SCREENCONTROLS]
! PROMPT('Recents Path:'),USE(?RecentsPath:Prompt)
! ENTRY(@s255),USE(RecentsPath)
[REPORTCONTROLS]
! STRING(@s255),USE(RecentsPath)
RecentsPath              STRING(255)
!!> GUID('9c5b8c6a-f1a2-4fb2-afcf-f79f50341e8b'),PROMPT('Recents Path:'),HEADER('Recents Path'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('New Solution Path:'),USE(?NewSolutionPath:Prompt)
! ENTRY(@s255),USE(NewSolutionPath)
[REPORTCONTROLS]
! STRING(@s255),USE(NewSolutionPath)
NewSolutionPath          STRING(255)
!!> GUID('1adc2bd4-6295-41a0-9da3-c051f5dafdc0'),PROMPT('New Solution Path:'),HEADER('New Solution Path'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Clarion Version:'),USE(?ClarionVersion:Prompt)
! ENTRY(@s10),USE(ClarionVersion)
[REPORTCONTROLS]
! STRING(@s10),USE(ClarionVersion)
ClarionVersion           STRING(10)
!!> GUID('1b37b036-8e8d-4e2d-93ed-8769b841452c'),PROMPT('Clarion Version:'),HEADER('Clarion Version'),PICTURE(@s10),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Recents Q:'),USE(?RecentsQ:Prompt)
! ENTRY(@s20),USE(RecentsQ)
[REPORTCONTROLS]
! STRING(@s20),USE(RecentsQ)
RecentsQ                 QUEUE,PRE(Rcnt)
!!> GUID('bf41a6c4-0c08-4aa0-bd17-8cb4b7c9ac03'),PROMPT('Recents Q:'),HEADER('Recents Q'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Sln Path:'),USE(?Rcnt:SlnPath:Prompt)
! ENTRY(@s255),USE(Rcnt:SlnPath)
[REPORTCONTROLS]
! STRING(@s255),USE(Rcnt:SlnPath)
SlnPath                    STRING(255)
!!> GUID('f3aca952-7d36-466a-8172-8be6a0114bac'),PROMPT('Sln Path:'),HEADER('Sln Path'),PICTURE(@s255),TYPEMODE(INS)
                         END
!!> GUID('db33694c-a029-4921-90be-fbae442e9459')
[SCREENCONTROLS]
! PROMPT('properties:'),USE(?properties:Prompt)
! ENTRY(@s20),USE(properties)
[REPORTCONTROLS]
! STRING(@s20),USE(properties)
properties               GROUP,PRE(),NAME('Properties')
!!> GUID('e99b8f6b-4495-48d7-9f8f-6b8f3030f46b'),PROMPT('properties:'),HEADER('properties'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('project :'),USE(?project_:Prompt)
! ENTRY(@s20),USE(project_)
[REPORTCONTROLS]
! STRING(@s20),USE(project_)
project_                   GROUP,PRE(),NAME('Project')
!!> GUID('765f38fd-7c3c-49e8-9d32-98d864fa4d42'),PROMPT('project :'),HEADER('project '),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('value:'),USE(?value:Prompt)
! ENTRY(@s255),USE(value)
[REPORTCONTROLS]
! STRING(@s255),USE(value)
value                        STRING(5000),NAME('value | attribute')
!!> GUID('582ee7dd-50ef-4d9e-99eb-b7a5e4f694b6'),PROMPT('value:'),HEADER('value'),PICTURE(@s255),TYPEMODE(INS)
                           END
!!> GUID('edb3651f-78a6-4807-b971-2cf8a033e7e8')
[SCREENCONTROLS]
! PROMPT('dictionary :'),USE(?dictionary_:Prompt)
! ENTRY(@s20),USE(dictionary_)
[REPORTCONTROLS]
! STRING(@s20),USE(dictionary_)
dictionary_                GROUP,PRE(),NAME('Dictionary')
!!> GUID('d87ed478-bffe-4002-bc0b-c081c4dbff8e'),PROMPT('dictionary :'),HEADER('dictionary '),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('value:'),USE(?value:Prompt)
! ENTRY(@s255),USE(value)
[REPORTCONTROLS]
! STRING(@s255),USE(value)
value                        STRING(5000),NAME('value | attribute')
!!> GUID('06bc7bdc-73e9-4693-97a5-33cf7b1a998b'),PROMPT('value:'),HEADER('value'),PICTURE(@s255),TYPEMODE(INS)
                           END
!!> GUID('1ab23c7c-c5a6-4d2e-b003-42b33ae03bd0')
[SCREENCONTROLS]
! PROMPT('diagram:'),USE(?diagram:Prompt)
! ENTRY(@s20),USE(diagram)
[REPORTCONTROLS]
! STRING(@s20),USE(diagram)
diagram                    GROUP,PRE(),NAME('Diagram')
!!> GUID('f4f15cc8-f340-458f-83b0-93f2ada40822'),PROMPT('diagram:'),HEADER('diagram'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('value:'),USE(?value:Prompt)
! ENTRY(@s255),USE(value)(2)
[REPORTCONTROLS]
! STRING(@s255),USE(value)(2)
value                        STRING(255),NAME('value | attribute')
!!> GUID('e0d2f1b8-a6f2-4378-accf-e8f58aa48840'),PROMPT('value:'),HEADER('value'),PICTURE(@s255),TYPEMODE(INS)
                           END
!!> GUID('1b8eb8c1-5128-4256-a582-833a9edf6f7a')
[SCREENCONTROLS]
! PROMPT('table :'),USE(?table_:Prompt)
! ENTRY(@s20),USE(table_)
[REPORTCONTROLS]
! STRING(@s20),USE(table_)
table_                     GROUP,PRE(),NAME('Table')
!!> GUID('91b90060-5895-454a-8c07-6b17ce4ecd70'),PROMPT('table :'),HEADER('table '),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('value:'),USE(?value:Prompt)
! ENTRY(@s255),USE(value)
[REPORTCONTROLS]
! STRING(@s255),USE(value)
value                        STRING(5000),NAME('value | attribute')
!!> GUID('ac8ab9cb-65e5-44c8-90dc-f493edffb45e'),PROMPT('value:'),HEADER('value'),PICTURE(@s255),TYPEMODE(INS)
                           END
!!> GUID('04b34a4c-42aa-476d-9785-684c94fe8b73')
[SCREENCONTROLS]
! PROMPT('file :'),USE(?file_:Prompt)
! ENTRY(@s20),USE(file_)
[REPORTCONTROLS]
! STRING(@s20),USE(file_)
file_                      GROUP,PRE(),NAME('File')
!!> GUID('96e6aff4-9817-4379-a893-ad96cf6e75ce'),PROMPT('file :'),HEADER('file '),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('value:'),USE(?value:Prompt)
! ENTRY(@s255),USE(value)
[REPORTCONTROLS]
! STRING(@s255),USE(value)
value                        STRING(5000),NAME('value | attribute')
!!> GUID('94db7390-39ce-40d5-ad9d-1e93db1a2e18'),PROMPT('value:'),HEADER('value'),PICTURE(@s255),TYPEMODE(INS)
                           END
!!> GUID('5debdff0-f585-4255-8b0a-69bf7119241a')
                         END
!!> GUID('8124b131-0949-4646-98eb-b99bc2a06e33')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%ProcedureOneInstance LONG  (0)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('Default')

%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%ButtonAction DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 2
WHEN  ('?ClarionVersion') (1)
WHEN  ('?Close') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 1
WHEN  ('?Close')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 1
WHEN  ('?Close')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 1
WHEN  ('?Close')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 1
WHEN  ('?Close')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('?Close')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('?Close')TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('AIBtn1')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('?Close')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%ITHasDllTemplate DEFAULT  ('')
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
x                   Long
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
st                  StringTheory
CmdSt               StringTheory
OutSt               StringTheory
xml                 xFilesTree
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
  CmdSt.SetValue(COMMAND())  

  CmdSt.RemoveChars('"')
  ClarionVersion = CmdSt.Between('CV=','<32>')
  NewSolutionPath = CmdSt.Between('NS=','')
  !CmdSt.Trace('ClarionVersion[' & Clip(ClarionVersion) & ']')
  !CmdSt.Trace('NewSolutionPath[' & Clip(NewSolutionPath) & ']')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END

  If COMMAND()
      0{PROP:Hide} = TRUE
      If Not ClarionVersion
          POST(EVENT:CloseWindow)
      END
      If Not NewSolutionPath
          POST(EVENT:CloseWindow)
      End
  End
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9500
PROPERTY:END
  If COMMAND()
      RecentsQ.SlnPath = NewSolutionPath
      Add(RecentsQ)
  End


  !ClarionVersion = '11.0'
  RecentsPath = ds_GetFolderPath(WE::CSIDL_APPDATA) & '\SoftVelocity\Clarion\' & Clip(ClarionVersion) & '\RecentOpen.xml'

  st.LoadFile(Clip(RecentsPath))
  xml.start()
    xml.SetTagCase(xf:CaseAsIs)
    xml.Load(properties,st,'Properties') ! Load From a StringTheory object  
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9950
PROPERTY:END
  !st.Trace(RecentsPath)

  
  st.SetValue(properties.project_.value,True)
  st.Split(',')
  
  Loop x = 1 to st.Records()
      RecentsQ.SlnPath = st.GetLine(x)
      
      Add(RecentsQ)
  End

  Clear(properties.project_.value,-1)
  Loop x = 1 to Records(RecentsQ)
      Get(RecentsQ,x)
      OutSt.AppendA(RecentsQ.SlnPath,True,',')
  End

  properties.project_.value = OutSt.GetValue()

  xml.start()
    xml.SetTagCase(xf:CaseAsIs)
    xml.SetDontSaveBlanks(true)
    xml.SetDontSaveBlankGroups(true)
    xml.Save(properties,st,'Properties') ! Save to a StringTheory object

  If COMMAND()
      st.SaveFile(Clip(RecentsPath))
      POST(EVENT:CloseWindow)
  End
[END]
[END]
[END]
[END]
[ADDITION]
NAME WinEvent WinEvent
[INSTANCE]
INSTANCE 4
OWNER 5
[PROMPTS]
%DisableWinEvent LONG  (0)
%CheckForCantCloseNowSetHere LONG  (1)
%AutoDown LONG  (0)
%NoAutoDown LONG  (0)
%LocWindowsVisible DEFAULT  ('0')
%WindowsVisibleAfterOpen LONG  (1)
%AlertWinEventDebug LONG  (0)
%DisplayCompileDate LONG  (0)
%DisplayCompileDateFormat DEFAULT  ('@D10')
%locNoHandleCloseDown LONG  (0)
%locCloseDownWhenWindowCloses LONG  (0)
%locCloseDownWhenWindowClosesCtrl DEFAULT  ('')
%altWinFix DEFAULT  ('Default')
%WinAlert MULTI LONG  ()
%Mess DEPEND %WinAlert DEFAULT TIMES 0

%Act1 DEPEND %WinAlert DEFAULT TIMES 0

%act2 DEPEND %WinAlert DEFAULT TIMES 0

%AlertControl DEPEND %WinAlert DEFAULT TIMES 0

%AlertControlType DEPEND %WinAlert DEFAULT TIMES 0

%locCloseDownWhenWindowClosesSet LONG  (0)
[ADDITION]
NAME ABC CloseButton
[INSTANCE]
INSTANCE 2
[WINDOW]
Window  WINDOW('Clarion Recents CI'),AT(,,457,301),FONT('Segoe UI',9),ICON(ICON:Clarion),GRAY
          BUTTON('Close'),AT(413,276),USE(?Close),#ORIG(?Close),#SEQ(2),#ORDINAL(1)
          LIST,AT(2,63,452,209),USE(?LIST1),VSCROLL,FORMAT('1020L(2)M~Recent Solutions~@s255@'), |
            FROM(RecentsQ),#FIELDS(Rcnt:SlnPath),#ORDINAL(2)
          PROMPT('Clarion Version:'),AT(2,3,47,10),USE(?ClarionVersion:Prompt),TRN,#ORDINAL(10000)
          ENTRY(@s10),AT(62,2,60,10),USE(ClarionVersion),#ORDINAL(10001)
        END

[END]
